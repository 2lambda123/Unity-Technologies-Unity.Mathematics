//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using static Unity.Mathematics.math;
using Burst.Compiler.IL.Tests;

namespace Unity.Mathematics.Tests
{
    [TestFixture]
    public class TestBool2
    {
        [TestCompiler]
        public static void bool2_constructor()
        {
            bool2 a = new bool2(false, true);
            TestUtils.AreEqual(false, a.x);
            TestUtils.AreEqual(true, a.y);
        }

        [TestCompiler]
        public static void bool2_scalar_constructor()
        {
            bool2 a = new bool2(true);
            TestUtils.AreEqual(true, a.x);
            TestUtils.AreEqual(true, a.y);
        }

        [TestCompiler]
        public static void bool2_static_constructor()
        {
            bool2 a = bool2(false, true);
            TestUtils.AreEqual(false, a.x);
            TestUtils.AreEqual(true, a.y);
        }

        [TestCompiler]
        public static void bool2_static_scalar_constructor()
        {
            bool2 a = bool2(true);
            TestUtils.AreEqual(true, a.x);
            TestUtils.AreEqual(true, a.y);
        }

        [TestCompiler]
        public static void bool2_operator_equal_wide_wide()
        {
            bool2 a0 = bool2(true, false);
            bool2 b0 = bool2(true, false);
            bool2 r0 = bool2(true, true);
            TestUtils.AreEqual(r0, a0 == b0);

            bool2 a1 = bool2(true, false);
            bool2 b1 = bool2(false, false);
            bool2 r1 = bool2(false, true);
            TestUtils.AreEqual(r1, a1 == b1);

            bool2 a2 = bool2(false, true);
            bool2 b2 = bool2(true, false);
            bool2 r2 = bool2(false, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool2 a3 = bool2(false, false);
            bool2 b3 = bool2(false, true);
            bool2 r3 = bool2(true, false);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool2_operator_equal_wide_scalar()
        {
            bool2 a0 = bool2(false, true);
            bool b0 = (true);
            bool2 r0 = bool2(false, true);
            TestUtils.AreEqual(r0, a0 == b0);

            bool2 a1 = bool2(false, false);
            bool b1 = (false);
            bool2 r1 = bool2(true, true);
            TestUtils.AreEqual(r1, a1 == b1);

            bool2 a2 = bool2(false, false);
            bool b2 = (true);
            bool2 r2 = bool2(false, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool2 a3 = bool2(false, true);
            bool b3 = (false);
            bool2 r3 = bool2(true, false);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool2_operator_equal_scalar_wide()
        {
            bool a0 = (false);
            bool2 b0 = bool2(true, false);
            bool2 r0 = bool2(false, true);
            TestUtils.AreEqual(r0, a0 == b0);

            bool a1 = (true);
            bool2 b1 = bool2(false, false);
            bool2 r1 = bool2(false, false);
            TestUtils.AreEqual(r1, a1 == b1);

            bool a2 = (true);
            bool2 b2 = bool2(false, false);
            bool2 r2 = bool2(false, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool a3 = (true);
            bool2 b3 = bool2(false, true);
            bool2 r3 = bool2(false, true);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool2_operator_not_equal_wide_wide()
        {
            bool2 a0 = bool2(true, true);
            bool2 b0 = bool2(true, false);
            bool2 r0 = bool2(false, true);
            TestUtils.AreEqual(r0, a0 != b0);

            bool2 a1 = bool2(true, false);
            bool2 b1 = bool2(false, false);
            bool2 r1 = bool2(true, false);
            TestUtils.AreEqual(r1, a1 != b1);

            bool2 a2 = bool2(false, true);
            bool2 b2 = bool2(true, false);
            bool2 r2 = bool2(true, true);
            TestUtils.AreEqual(r2, a2 != b2);

            bool2 a3 = bool2(false, false);
            bool2 b3 = bool2(false, false);
            bool2 r3 = bool2(false, false);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool2_operator_not_equal_wide_scalar()
        {
            bool2 a0 = bool2(false, true);
            bool b0 = (false);
            bool2 r0 = bool2(false, true);
            TestUtils.AreEqual(r0, a0 != b0);

            bool2 a1 = bool2(false, true);
            bool b1 = (true);
            bool2 r1 = bool2(true, false);
            TestUtils.AreEqual(r1, a1 != b1);

            bool2 a2 = bool2(false, false);
            bool b2 = (false);
            bool2 r2 = bool2(false, false);
            TestUtils.AreEqual(r2, a2 != b2);

            bool2 a3 = bool2(false, false);
            bool b3 = (false);
            bool2 r3 = bool2(false, false);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool2_operator_not_equal_scalar_wide()
        {
            bool a0 = (true);
            bool2 b0 = bool2(false, false);
            bool2 r0 = bool2(true, true);
            TestUtils.AreEqual(r0, a0 != b0);

            bool a1 = (true);
            bool2 b1 = bool2(false, false);
            bool2 r1 = bool2(true, true);
            TestUtils.AreEqual(r1, a1 != b1);

            bool a2 = (false);
            bool2 b2 = bool2(true, true);
            bool2 r2 = bool2(true, true);
            TestUtils.AreEqual(r2, a2 != b2);

            bool a3 = (true);
            bool2 b3 = bool2(false, false);
            bool2 r3 = bool2(true, true);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool2_operator_bitwise_and_wide_wide()
        {
            bool2 a0 = bool2(false, false);
            bool2 b0 = bool2(false, false);
            bool2 r0 = bool2(false, false);
            TestUtils.AreEqual(r0, a0 & b0);

            bool2 a1 = bool2(true, true);
            bool2 b1 = bool2(true, false);
            bool2 r1 = bool2(true, false);
            TestUtils.AreEqual(r1, a1 & b1);

            bool2 a2 = bool2(false, false);
            bool2 b2 = bool2(true, true);
            bool2 r2 = bool2(false, false);
            TestUtils.AreEqual(r2, a2 & b2);

            bool2 a3 = bool2(true, true);
            bool2 b3 = bool2(false, false);
            bool2 r3 = bool2(false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool2_operator_bitwise_and_wide_scalar()
        {
            bool2 a0 = bool2(true, false);
            bool b0 = (true);
            bool2 r0 = bool2(true, false);
            TestUtils.AreEqual(r0, a0 & b0);

            bool2 a1 = bool2(false, true);
            bool b1 = (true);
            bool2 r1 = bool2(false, true);
            TestUtils.AreEqual(r1, a1 & b1);

            bool2 a2 = bool2(false, false);
            bool b2 = (false);
            bool2 r2 = bool2(false, false);
            TestUtils.AreEqual(r2, a2 & b2);

            bool2 a3 = bool2(false, true);
            bool b3 = (false);
            bool2 r3 = bool2(false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool2_operator_bitwise_and_scalar_wide()
        {
            bool a0 = (false);
            bool2 b0 = bool2(false, false);
            bool2 r0 = bool2(false, false);
            TestUtils.AreEqual(r0, a0 & b0);

            bool a1 = (true);
            bool2 b1 = bool2(true, true);
            bool2 r1 = bool2(true, true);
            TestUtils.AreEqual(r1, a1 & b1);

            bool a2 = (false);
            bool2 b2 = bool2(true, false);
            bool2 r2 = bool2(false, false);
            TestUtils.AreEqual(r2, a2 & b2);

            bool a3 = (false);
            bool2 b3 = bool2(false, true);
            bool2 r3 = bool2(false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool2_operator_bitwise_or_wide_wide()
        {
            bool2 a0 = bool2(true, true);
            bool2 b0 = bool2(false, false);
            bool2 r0 = bool2(true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool2 a1 = bool2(true, false);
            bool2 b1 = bool2(false, false);
            bool2 r1 = bool2(true, false);
            TestUtils.AreEqual(r1, a1 | b1);

            bool2 a2 = bool2(true, false);
            bool2 b2 = bool2(true, true);
            bool2 r2 = bool2(true, true);
            TestUtils.AreEqual(r2, a2 | b2);

            bool2 a3 = bool2(true, true);
            bool2 b3 = bool2(true, false);
            bool2 r3 = bool2(true, true);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool2_operator_bitwise_or_wide_scalar()
        {
            bool2 a0 = bool2(true, true);
            bool b0 = (true);
            bool2 r0 = bool2(true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool2 a1 = bool2(false, true);
            bool b1 = (true);
            bool2 r1 = bool2(true, true);
            TestUtils.AreEqual(r1, a1 | b1);

            bool2 a2 = bool2(true, false);
            bool b2 = (true);
            bool2 r2 = bool2(true, true);
            TestUtils.AreEqual(r2, a2 | b2);

            bool2 a3 = bool2(true, false);
            bool b3 = (false);
            bool2 r3 = bool2(true, false);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool2_operator_bitwise_or_scalar_wide()
        {
            bool a0 = (true);
            bool2 b0 = bool2(true, true);
            bool2 r0 = bool2(true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool a1 = (false);
            bool2 b1 = bool2(false, true);
            bool2 r1 = bool2(false, true);
            TestUtils.AreEqual(r1, a1 | b1);

            bool a2 = (true);
            bool2 b2 = bool2(true, false);
            bool2 r2 = bool2(true, true);
            TestUtils.AreEqual(r2, a2 | b2);

            bool a3 = (false);
            bool2 b3 = bool2(true, true);
            bool2 r3 = bool2(true, true);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool2_operator_bitwise_xor_wide_wide()
        {
            bool2 a0 = bool2(true, false);
            bool2 b0 = bool2(true, true);
            bool2 r0 = bool2(false, true);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool2 a1 = bool2(false, true);
            bool2 b1 = bool2(false, true);
            bool2 r1 = bool2(false, false);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool2 a2 = bool2(false, false);
            bool2 b2 = bool2(false, true);
            bool2 r2 = bool2(false, true);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool2 a3 = bool2(false, true);
            bool2 b3 = bool2(false, true);
            bool2 r3 = bool2(false, false);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool2_operator_bitwise_xor_wide_scalar()
        {
            bool2 a0 = bool2(false, false);
            bool b0 = (false);
            bool2 r0 = bool2(false, false);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool2 a1 = bool2(true, false);
            bool b1 = (true);
            bool2 r1 = bool2(false, true);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool2 a2 = bool2(false, false);
            bool b2 = (false);
            bool2 r2 = bool2(false, false);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool2 a3 = bool2(false, false);
            bool b3 = (false);
            bool2 r3 = bool2(false, false);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool2_operator_bitwise_xor_scalar_wide()
        {
            bool a0 = (true);
            bool2 b0 = bool2(true, false);
            bool2 r0 = bool2(false, true);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool a1 = (true);
            bool2 b1 = bool2(true, false);
            bool2 r1 = bool2(false, true);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool a2 = (true);
            bool2 b2 = bool2(true, false);
            bool2 r2 = bool2(false, true);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool a3 = (false);
            bool2 b3 = bool2(true, true);
            bool2 r3 = bool2(true, true);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool2_operator_logical_not()
        {
            bool2 a0 = bool2(true, true);
            bool2 r0 = bool2(false, false);
            TestUtils.AreEqual(r0, !a0);

            bool2 a1 = bool2(false, true);
            bool2 r1 = bool2(true, false);
            TestUtils.AreEqual(r1, !a1);

            bool2 a2 = bool2(false, false);
            bool2 r2 = bool2(true, true);
            TestUtils.AreEqual(r2, !a2);

            bool2 a3 = bool2(true, false);
            bool2 r3 = bool2(false, true);
            TestUtils.AreEqual(r3, !a3);
        }

        [TestCompiler]
        public static void bool2_swizzle_getters()
        {
            var v1 = new bool2(false, true);
            var v2 = new bool2(true, false);

            TestUtils.AreEqual(bool4(false, false, false, false), v1.xxxx);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.xxxy);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.xxyx);
            TestUtils.AreEqual(bool4(false, false, true, true), v1.xxyy);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.xyxx);
            TestUtils.AreEqual(bool4(false, true, false, true), v1.xyxy);
            TestUtils.AreEqual(bool4(false, true, true, false), v1.xyyx);
            TestUtils.AreEqual(bool4(false, true, true, true), v1.xyyy);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.yxxx);
            TestUtils.AreEqual(bool4(true, false, false, true), v1.yxxy);
            TestUtils.AreEqual(bool4(true, false, true, false), v1.yxyx);
            TestUtils.AreEqual(bool4(true, false, true, true), v1.yxyy);
            TestUtils.AreEqual(bool4(true, true, false, false), v1.yyxx);
            TestUtils.AreEqual(bool4(true, true, false, true), v1.yyxy);
            TestUtils.AreEqual(bool4(true, true, true, false), v1.yyyx);
            TestUtils.AreEqual(bool4(true, true, true, true), v1.yyyy);
            TestUtils.AreEqual(bool3(false, false, false), v1.xxx);
            TestUtils.AreEqual(bool3(false, false, true), v1.xxy);
            TestUtils.AreEqual(bool3(false, true, false), v1.xyx);
            TestUtils.AreEqual(bool3(false, true, true), v1.xyy);
            TestUtils.AreEqual(bool3(true, false, false), v1.yxx);
            TestUtils.AreEqual(bool3(true, false, true), v1.yxy);
            TestUtils.AreEqual(bool3(true, true, false), v1.yyx);
            TestUtils.AreEqual(bool3(true, true, true), v1.yyy);
            TestUtils.AreEqual(bool2(false, false), v1.xx);
            TestUtils.AreEqual(bool2(false, true), v1.xy);
            TestUtils.AreEqual(bool2(true, false), v1.yx);
            TestUtils.AreEqual(bool2(true, true), v1.yy);
        }

        [TestCompiler]
        public static void bool2_swizzle_setters()
        {
            var v1 = new bool2(false, true);
            var v2 = new bool2(true, false);

            var set = new bool2();

            set = v1;
            set.xy = v1.xy;
            TestUtils.AreEqual(bool2(false, true), set);
            set = v1;
            set.yx = v1.xy;
            TestUtils.AreEqual(bool2(true, false), set);
        }

        [TestCompiler]
        public static void bool2_colorswizzle()
        {
        }


    }
}
