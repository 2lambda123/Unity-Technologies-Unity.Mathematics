//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using static Unity.Mathematics.math;
using Burst.Compiler.IL.Tests;

namespace Unity.Mathematics.Tests
{
    [TestFixture]
    public class TestBool3
    {
        [TestCompiler]
        public static void bool3_constructor()
        {
            bool3 a = new bool3(false, true, false);
            TestUtils.AreEqual(false, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(false, a.z);
        }

        [TestCompiler]
        public static void bool3_scalar_constructor()
        {
            bool3 a = new bool3(true);
            TestUtils.AreEqual(true, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(true, a.z);
        }

        [TestCompiler]
        public static void bool3_static_constructor()
        {
            bool3 a = bool3(false, true, false);
            TestUtils.AreEqual(false, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(false, a.z);
        }

        [TestCompiler]
        public static void bool3_static_scalar_constructor()
        {
            bool3 a = bool3(true);
            TestUtils.AreEqual(true, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(true, a.z);
        }

        [TestCompiler]
        public static void bool3_operator_equal_wide_wide()
        {
            bool3 a0 = bool3(true, false, true);
            bool3 b0 = bool3(true, false, false);
            bool3 r0 = bool3(true, true, false);
            TestUtils.AreEqual(r0, a0 == b0);

            bool3 a1 = bool3(false, false, true);
            bool3 b1 = bool3(false, true, false);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 == b1);

            bool3 a2 = bool3(false, false, true);
            bool3 b2 = bool3(false, true, false);
            bool3 r2 = bool3(true, false, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool3 a3 = bool3(false, true, false);
            bool3 b3 = bool3(false, false, false);
            bool3 r3 = bool3(true, false, true);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool3_operator_equal_wide_scalar()
        {
            bool3 a0 = bool3(false, true, false);
            bool b0 = (true);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 == b0);

            bool3 a1 = bool3(false, false, true);
            bool b1 = (false);
            bool3 r1 = bool3(true, true, false);
            TestUtils.AreEqual(r1, a1 == b1);

            bool3 a2 = bool3(false, false, true);
            bool b2 = (false);
            bool3 r2 = bool3(true, true, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool3 a3 = bool3(true, true, false);
            bool b3 = (false);
            bool3 r3 = bool3(false, false, true);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool3_operator_equal_scalar_wide()
        {
            bool a0 = (false);
            bool3 b0 = bool3(true, false, true);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 == b0);

            bool a1 = (false);
            bool3 b1 = bool3(false, true, false);
            bool3 r1 = bool3(true, false, true);
            TestUtils.AreEqual(r1, a1 == b1);

            bool a2 = (false);
            bool3 b2 = bool3(true, false, true);
            bool3 r2 = bool3(false, true, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool a3 = (true);
            bool3 b3 = bool3(false, true, false);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool3_operator_not_equal_wide_wide()
        {
            bool3 a0 = bool3(true, true, true);
            bool3 b0 = bool3(true, false, false);
            bool3 r0 = bool3(false, true, true);
            TestUtils.AreEqual(r0, a0 != b0);

            bool3 a1 = bool3(false, false, true);
            bool3 b1 = bool3(false, true, false);
            bool3 r1 = bool3(false, true, true);
            TestUtils.AreEqual(r1, a1 != b1);

            bool3 a2 = bool3(false, false, false);
            bool3 b2 = bool3(false, false, false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 != b2);

            bool3 a3 = bool3(false, true, true);
            bool3 b3 = bool3(true, true, true);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool3_operator_not_equal_wide_scalar()
        {
            bool3 a0 = bool3(false, true, false);
            bool b0 = (false);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 != b0);

            bool3 a1 = bool3(true, false, false);
            bool b1 = (true);
            bool3 r1 = bool3(false, true, true);
            TestUtils.AreEqual(r1, a1 != b1);

            bool3 a2 = bool3(false, false, false);
            bool b2 = (false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 != b2);

            bool3 a3 = bool3(false, true, false);
            bool b3 = (false);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool3_operator_not_equal_scalar_wide()
        {
            bool a0 = (true);
            bool3 b0 = bool3(false, false, true);
            bool3 r0 = bool3(true, true, false);
            TestUtils.AreEqual(r0, a0 != b0);

            bool a1 = (false);
            bool3 b1 = bool3(false, false, true);
            bool3 r1 = bool3(false, false, true);
            TestUtils.AreEqual(r1, a1 != b1);

            bool a2 = (true);
            bool3 b2 = bool3(true, false, false);
            bool3 r2 = bool3(false, true, true);
            TestUtils.AreEqual(r2, a2 != b2);

            bool a3 = (false);
            bool3 b3 = bool3(false, false, true);
            bool3 r3 = bool3(false, false, true);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_and_wide_wide()
        {
            bool3 a0 = bool3(false, false, true);
            bool3 b0 = bool3(false, false, true);
            bool3 r0 = bool3(false, false, true);
            TestUtils.AreEqual(r0, a0 & b0);

            bool3 a1 = bool3(true, false, false);
            bool3 b1 = bool3(false, true, true);
            bool3 r1 = bool3(false, false, false);
            TestUtils.AreEqual(r1, a1 & b1);

            bool3 a2 = bool3(true, true, true);
            bool3 b2 = bool3(false, false, true);
            bool3 r2 = bool3(false, false, true);
            TestUtils.AreEqual(r2, a2 & b2);

            bool3 a3 = bool3(false, true, true);
            bool3 b3 = bool3(true, false, false);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_and_wide_scalar()
        {
            bool3 a0 = bool3(true, false, false);
            bool b0 = (true);
            bool3 r0 = bool3(true, false, false);
            TestUtils.AreEqual(r0, a0 & b0);

            bool3 a1 = bool3(true, false, false);
            bool b1 = (true);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 & b1);

            bool3 a2 = bool3(false, false, true);
            bool b2 = (false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 & b2);

            bool3 a3 = bool3(true, false, false);
            bool b3 = (true);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_and_scalar_wide()
        {
            bool a0 = (false);
            bool3 b0 = bool3(false, false, true);
            bool3 r0 = bool3(false, false, false);
            TestUtils.AreEqual(r0, a0 & b0);

            bool a1 = (true);
            bool3 b1 = bool3(true, false, true);
            bool3 r1 = bool3(true, false, true);
            TestUtils.AreEqual(r1, a1 & b1);

            bool a2 = (false);
            bool3 b2 = bool3(false, false, true);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 & b2);

            bool a3 = (false);
            bool3 b3 = bool3(false, false, true);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_or_wide_wide()
        {
            bool3 a0 = bool3(true, true, true);
            bool3 b0 = bool3(false, false, false);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool3 a1 = bool3(false, true, false);
            bool3 b1 = bool3(false, true, true);
            bool3 r1 = bool3(false, true, true);
            TestUtils.AreEqual(r1, a1 | b1);

            bool3 a2 = bool3(true, true, false);
            bool3 b2 = bool3(true, false, false);
            bool3 r2 = bool3(true, true, false);
            TestUtils.AreEqual(r2, a2 | b2);

            bool3 a3 = bool3(true, true, true);
            bool3 b3 = bool3(true, false, false);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_or_wide_scalar()
        {
            bool3 a0 = bool3(true, true, false);
            bool b0 = (true);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool3 a1 = bool3(true, true, true);
            bool b1 = (true);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(r1, a1 | b1);

            bool3 a2 = bool3(false, false, false);
            bool b2 = (true);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(r2, a2 | b2);

            bool3 a3 = bool3(true, false, true);
            bool b3 = (false);
            bool3 r3 = bool3(true, false, true);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_or_scalar_wide()
        {
            bool a0 = (true);
            bool3 b0 = bool3(true, true, false);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool a1 = (false);
            bool3 b1 = bool3(true, true, true);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(r1, a1 | b1);

            bool a2 = (false);
            bool3 b2 = bool3(false, true, true);
            bool3 r2 = bool3(false, true, true);
            TestUtils.AreEqual(r2, a2 | b2);

            bool a3 = (false);
            bool3 b3 = bool3(true, true, false);
            bool3 r3 = bool3(true, true, false);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_xor_wide_wide()
        {
            bool3 a0 = bool3(true, false, false);
            bool3 b0 = bool3(true, true, false);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool3 a1 = bool3(true, false, false);
            bool3 b1 = bool3(true, false, true);
            bool3 r1 = bool3(false, false, true);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool3 a2 = bool3(false, true, false);
            bool3 b2 = bool3(false, true, false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool3 a3 = bool3(false, true, true);
            bool3 b3 = bool3(false, false, true);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_xor_wide_scalar()
        {
            bool3 a0 = bool3(false, false, true);
            bool b0 = (false);
            bool3 r0 = bool3(false, false, true);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool3 a1 = bool3(true, false, false);
            bool b1 = (false);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool3 a2 = bool3(false, false, false);
            bool b2 = (false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool3 a3 = bool3(true, true, true);
            bool b3 = (false);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_xor_scalar_wide()
        {
            bool a0 = (true);
            bool3 b0 = bool3(true, false, true);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool a1 = (true);
            bool3 b1 = bool3(false, true, true);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool a2 = (false);
            bool3 b2 = bool3(false, true, true);
            bool3 r2 = bool3(false, true, true);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool a3 = (false);
            bool3 b3 = bool3(false, true, false);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool3_operator_logical_not()
        {
            bool3 a0 = bool3(true, true, false);
            bool3 r0 = bool3(false, false, true);
            TestUtils.AreEqual(r0, !a0);

            bool3 a1 = bool3(false, false, true);
            bool3 r1 = bool3(true, true, false);
            TestUtils.AreEqual(r1, !a1);

            bool3 a2 = bool3(false, false, false);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(r2, !a2);

            bool3 a3 = bool3(false, true, true);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(r3, !a3);
        }

        [TestCompiler]
        public static void bool3_swizzle_getters()
        {
            var v1 = new bool3(false, true, false);
            var v2 = new bool3(true, false, true);

            TestUtils.AreEqual(bool4(false, false, false, false), v1.rrrr);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.rrrg);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.rrrb);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.rrgr);
            TestUtils.AreEqual(bool4(false, false, true, true), v1.rrgg);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.rrgb);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.rrbr);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.rrbg);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.rrbb);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.rgrr);
            TestUtils.AreEqual(bool4(false, true, false, true), v1.rgrg);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.rgrb);
            TestUtils.AreEqual(bool4(false, true, true, false), v1.rggr);
            TestUtils.AreEqual(bool4(false, true, true, true), v1.rggg);
            TestUtils.AreEqual(bool4(false, true, true, false), v1.rggb);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.rgbr);
            TestUtils.AreEqual(bool4(false, true, false, true), v1.rgbg);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.rgbb);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.rbrr);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.rbrg);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.rbrb);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.rbgr);
            TestUtils.AreEqual(bool4(false, false, true, true), v1.rbgg);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.rbgb);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.rbbr);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.rbbg);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.rbbb);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.grrr);
            TestUtils.AreEqual(bool4(true, false, false, true), v1.grrg);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.grrb);
            TestUtils.AreEqual(bool4(true, false, true, false), v1.grgr);
            TestUtils.AreEqual(bool4(true, false, true, true), v1.grgg);
            TestUtils.AreEqual(bool4(true, false, true, false), v1.grgb);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.grbr);
            TestUtils.AreEqual(bool4(true, false, false, true), v1.grbg);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.grbb);
            TestUtils.AreEqual(bool4(true, true, false, false), v1.ggrr);
            TestUtils.AreEqual(bool4(true, true, false, true), v1.ggrg);
            TestUtils.AreEqual(bool4(true, true, false, false), v1.ggrb);
            TestUtils.AreEqual(bool4(true, true, true, false), v1.gggr);
            TestUtils.AreEqual(bool4(true, true, true, true), v1.gggg);
            TestUtils.AreEqual(bool4(true, true, true, false), v1.gggb);
            TestUtils.AreEqual(bool4(true, true, false, false), v1.ggbr);
            TestUtils.AreEqual(bool4(true, true, false, true), v1.ggbg);
            TestUtils.AreEqual(bool4(true, true, false, false), v1.ggbb);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.gbrr);
            TestUtils.AreEqual(bool4(true, false, false, true), v1.gbrg);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.gbrb);
            TestUtils.AreEqual(bool4(true, false, true, false), v1.gbgr);
            TestUtils.AreEqual(bool4(true, false, true, true), v1.gbgg);
            TestUtils.AreEqual(bool4(true, false, true, false), v1.gbgb);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.gbbr);
            TestUtils.AreEqual(bool4(true, false, false, true), v1.gbbg);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.gbbb);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.brrr);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.brrg);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.brrb);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.brgr);
            TestUtils.AreEqual(bool4(false, false, true, true), v1.brgg);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.brgb);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.brbr);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.brbg);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.brbb);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.bgrr);
            TestUtils.AreEqual(bool4(false, true, false, true), v1.bgrg);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.bgrb);
            TestUtils.AreEqual(bool4(false, true, true, false), v1.bggr);
            TestUtils.AreEqual(bool4(false, true, true, true), v1.bggg);
            TestUtils.AreEqual(bool4(false, true, true, false), v1.bggb);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.bgbr);
            TestUtils.AreEqual(bool4(false, true, false, true), v1.bgbg);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.bgbb);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.bbrr);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.bbrg);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.bbrb);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.bbgr);
            TestUtils.AreEqual(bool4(false, false, true, true), v1.bbgg);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.bbgb);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.bbbr);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.bbbg);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.bbbb);
            TestUtils.AreEqual(bool3(false, false, false), v1.rrr);
            TestUtils.AreEqual(bool3(false, false, true), v1.rrg);
            TestUtils.AreEqual(bool3(false, false, false), v1.rrb);
            TestUtils.AreEqual(bool3(false, true, false), v1.rgr);
            TestUtils.AreEqual(bool3(false, true, true), v1.rgg);
            TestUtils.AreEqual(bool3(false, true, false), v1.rgb);
            TestUtils.AreEqual(bool3(false, false, false), v1.rbr);
            TestUtils.AreEqual(bool3(false, false, true), v1.rbg);
            TestUtils.AreEqual(bool3(false, false, false), v1.rbb);
            TestUtils.AreEqual(bool3(true, false, false), v1.grr);
            TestUtils.AreEqual(bool3(true, false, true), v1.grg);
            TestUtils.AreEqual(bool3(true, false, false), v1.grb);
            TestUtils.AreEqual(bool3(true, true, false), v1.ggr);
            TestUtils.AreEqual(bool3(true, true, true), v1.ggg);
            TestUtils.AreEqual(bool3(true, true, false), v1.ggb);
            TestUtils.AreEqual(bool3(true, false, false), v1.gbr);
            TestUtils.AreEqual(bool3(true, false, true), v1.gbg);
            TestUtils.AreEqual(bool3(true, false, false), v1.gbb);
            TestUtils.AreEqual(bool3(false, false, false), v1.brr);
            TestUtils.AreEqual(bool3(false, false, true), v1.brg);
            TestUtils.AreEqual(bool3(false, false, false), v1.brb);
            TestUtils.AreEqual(bool3(false, true, false), v1.bgr);
            TestUtils.AreEqual(bool3(false, true, true), v1.bgg);
            TestUtils.AreEqual(bool3(false, true, false), v1.bgb);
            TestUtils.AreEqual(bool3(false, false, false), v1.bbr);
            TestUtils.AreEqual(bool3(false, false, true), v1.bbg);
            TestUtils.AreEqual(bool3(false, false, false), v1.bbb);
            TestUtils.AreEqual(bool2(false, false), v1.rr);
            TestUtils.AreEqual(bool2(false, true), v1.rg);
            TestUtils.AreEqual(bool2(false, false), v1.rb);
            TestUtils.AreEqual(bool2(true, false), v1.gr);
            TestUtils.AreEqual(bool2(true, true), v1.gg);
            TestUtils.AreEqual(bool2(true, false), v1.gb);
            TestUtils.AreEqual(bool2(false, false), v1.br);
            TestUtils.AreEqual(bool2(false, true), v1.bg);
            TestUtils.AreEqual(bool2(false, false), v1.bb);
        }

        [TestCompiler]
        public static void bool3_swizzle_setters()
        {
            var v1 = new bool3(false, true, false);
            var v2 = new bool3(true, false, true);

            var set = new bool3();

            set = v1;
            set.rgb = v1.rgb;
            TestUtils.AreEqual(bool3(false, true, false), set);
            set = v1;
            set.rbg = v1.rgb;
            TestUtils.AreEqual(bool3(false, false, true), set);
            set = v1;
            set.grb = v1.rgb;
            TestUtils.AreEqual(bool3(true, false, false), set);
            set = v1;
            set.gbr = v1.rgb;
            TestUtils.AreEqual(bool3(false, false, true), set);
            set = v1;
            set.brg = v1.rgb;
            TestUtils.AreEqual(bool3(true, false, false), set);
            set = v1;
            set.bgr = v1.rgb;
            TestUtils.AreEqual(bool3(false, true, false), set);
            set = v1;
            set.rg = v1.rg;
            TestUtils.AreEqual(bool3(false, true, false), set);
            set = v1;
            set.rb = v1.rg;
            TestUtils.AreEqual(bool3(false, true, true), set);
            set = v1;
            set.gr = v1.rg;
            TestUtils.AreEqual(bool3(true, false, false), set);
            set = v1;
            set.gb = v1.rg;
            TestUtils.AreEqual(bool3(false, false, true), set);
            set = v1;
            set.br = v1.rg;
            TestUtils.AreEqual(bool3(true, true, false), set);
            set = v1;
            set.bg = v1.rg;
            TestUtils.AreEqual(bool3(false, true, false), set);
        }

        [TestCompiler]
        public static void bool3_colorswizzle()
        {
        }


    }
}
