//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using static Unity.Mathematics.math;
using Burst.Compiler.IL.Tests;

namespace Unity.Mathematics.Tests
{
    [TestFixture]
    public class TestBool3
    {
        [TestCompiler]
        public static void bool3_constructor()
        {
            bool3 a = new bool3(false, true, false);
            TestUtils.AreEqual(false, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(false, a.z);
        }

        [TestCompiler]
        public static void bool3_scalar_constructor()
        {
            bool3 a = new bool3(true);
            TestUtils.AreEqual(true, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(true, a.z);
        }

        [TestCompiler]
        public static void bool3_static_constructor()
        {
            bool3 a = bool3(false, true, false);
            TestUtils.AreEqual(false, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(false, a.z);
        }

        [TestCompiler]
        public static void bool3_static_scalar_constructor()
        {
            bool3 a = bool3(true);
            TestUtils.AreEqual(true, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(true, a.z);
        }

        [TestCompiler]
        public static void bool3_operator_equal_wide_wide()
        {
            bool3 a0 = bool3(true, false, true);
            bool3 b0 = bool3(true, false, false);
            bool3 r0 = bool3(true, true, false);
            TestUtils.AreEqual(r0, a0 == b0);

            bool3 a1 = bool3(false, false, true);
            bool3 b1 = bool3(false, true, false);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 == b1);

            bool3 a2 = bool3(false, false, true);
            bool3 b2 = bool3(false, true, false);
            bool3 r2 = bool3(true, false, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool3 a3 = bool3(false, true, false);
            bool3 b3 = bool3(false, false, false);
            bool3 r3 = bool3(true, false, true);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool3_operator_equal_wide_scalar()
        {
            bool3 a0 = bool3(false, true, false);
            bool b0 = (true);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 == b0);

            bool3 a1 = bool3(false, false, true);
            bool b1 = (false);
            bool3 r1 = bool3(true, true, false);
            TestUtils.AreEqual(r1, a1 == b1);

            bool3 a2 = bool3(false, false, true);
            bool b2 = (false);
            bool3 r2 = bool3(true, true, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool3 a3 = bool3(true, true, false);
            bool b3 = (false);
            bool3 r3 = bool3(false, false, true);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool3_operator_equal_scalar_wide()
        {
            bool a0 = (false);
            bool3 b0 = bool3(true, false, true);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 == b0);

            bool a1 = (false);
            bool3 b1 = bool3(false, true, false);
            bool3 r1 = bool3(true, false, true);
            TestUtils.AreEqual(r1, a1 == b1);

            bool a2 = (false);
            bool3 b2 = bool3(true, false, true);
            bool3 r2 = bool3(false, true, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool a3 = (true);
            bool3 b3 = bool3(false, true, false);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool3_operator_not_equal_wide_wide()
        {
            bool3 a0 = bool3(true, true, true);
            bool3 b0 = bool3(true, false, false);
            bool3 r0 = bool3(false, true, true);
            TestUtils.AreEqual(r0, a0 != b0);

            bool3 a1 = bool3(false, false, true);
            bool3 b1 = bool3(false, true, false);
            bool3 r1 = bool3(false, true, true);
            TestUtils.AreEqual(r1, a1 != b1);

            bool3 a2 = bool3(false, false, false);
            bool3 b2 = bool3(false, false, false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 != b2);

            bool3 a3 = bool3(false, true, true);
            bool3 b3 = bool3(true, true, true);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool3_operator_not_equal_wide_scalar()
        {
            bool3 a0 = bool3(false, true, false);
            bool b0 = (false);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 != b0);

            bool3 a1 = bool3(true, false, false);
            bool b1 = (true);
            bool3 r1 = bool3(false, true, true);
            TestUtils.AreEqual(r1, a1 != b1);

            bool3 a2 = bool3(false, false, false);
            bool b2 = (false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 != b2);

            bool3 a3 = bool3(false, true, false);
            bool b3 = (false);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool3_operator_not_equal_scalar_wide()
        {
            bool a0 = (true);
            bool3 b0 = bool3(false, false, true);
            bool3 r0 = bool3(true, true, false);
            TestUtils.AreEqual(r0, a0 != b0);

            bool a1 = (false);
            bool3 b1 = bool3(false, false, true);
            bool3 r1 = bool3(false, false, true);
            TestUtils.AreEqual(r1, a1 != b1);

            bool a2 = (true);
            bool3 b2 = bool3(true, false, false);
            bool3 r2 = bool3(false, true, true);
            TestUtils.AreEqual(r2, a2 != b2);

            bool a3 = (false);
            bool3 b3 = bool3(false, false, true);
            bool3 r3 = bool3(false, false, true);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_and_wide_wide()
        {
            bool3 a0 = bool3(false, false, true);
            bool3 b0 = bool3(false, false, true);
            bool3 r0 = bool3(false, false, true);
            TestUtils.AreEqual(r0, a0 & b0);

            bool3 a1 = bool3(true, false, false);
            bool3 b1 = bool3(false, true, true);
            bool3 r1 = bool3(false, false, false);
            TestUtils.AreEqual(r1, a1 & b1);

            bool3 a2 = bool3(true, true, true);
            bool3 b2 = bool3(false, false, true);
            bool3 r2 = bool3(false, false, true);
            TestUtils.AreEqual(r2, a2 & b2);

            bool3 a3 = bool3(false, true, true);
            bool3 b3 = bool3(true, false, false);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_and_wide_scalar()
        {
            bool3 a0 = bool3(true, false, false);
            bool b0 = (true);
            bool3 r0 = bool3(true, false, false);
            TestUtils.AreEqual(r0, a0 & b0);

            bool3 a1 = bool3(true, false, false);
            bool b1 = (true);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 & b1);

            bool3 a2 = bool3(false, false, true);
            bool b2 = (false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 & b2);

            bool3 a3 = bool3(true, false, false);
            bool b3 = (true);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_and_scalar_wide()
        {
            bool a0 = (false);
            bool3 b0 = bool3(false, false, true);
            bool3 r0 = bool3(false, false, false);
            TestUtils.AreEqual(r0, a0 & b0);

            bool a1 = (true);
            bool3 b1 = bool3(true, false, true);
            bool3 r1 = bool3(true, false, true);
            TestUtils.AreEqual(r1, a1 & b1);

            bool a2 = (false);
            bool3 b2 = bool3(false, false, true);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 & b2);

            bool a3 = (false);
            bool3 b3 = bool3(false, false, true);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_or_wide_wide()
        {
            bool3 a0 = bool3(true, true, true);
            bool3 b0 = bool3(false, false, false);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool3 a1 = bool3(false, true, false);
            bool3 b1 = bool3(false, true, true);
            bool3 r1 = bool3(false, true, true);
            TestUtils.AreEqual(r1, a1 | b1);

            bool3 a2 = bool3(true, true, false);
            bool3 b2 = bool3(true, false, false);
            bool3 r2 = bool3(true, true, false);
            TestUtils.AreEqual(r2, a2 | b2);

            bool3 a3 = bool3(true, true, true);
            bool3 b3 = bool3(true, false, false);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_or_wide_scalar()
        {
            bool3 a0 = bool3(true, true, false);
            bool b0 = (true);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool3 a1 = bool3(true, true, true);
            bool b1 = (true);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(r1, a1 | b1);

            bool3 a2 = bool3(false, false, false);
            bool b2 = (true);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(r2, a2 | b2);

            bool3 a3 = bool3(true, false, true);
            bool b3 = (false);
            bool3 r3 = bool3(true, false, true);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_or_scalar_wide()
        {
            bool a0 = (true);
            bool3 b0 = bool3(true, true, false);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool a1 = (false);
            bool3 b1 = bool3(true, true, true);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(r1, a1 | b1);

            bool a2 = (false);
            bool3 b2 = bool3(false, true, true);
            bool3 r2 = bool3(false, true, true);
            TestUtils.AreEqual(r2, a2 | b2);

            bool a3 = (false);
            bool3 b3 = bool3(true, true, false);
            bool3 r3 = bool3(true, true, false);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_xor_wide_wide()
        {
            bool3 a0 = bool3(true, false, false);
            bool3 b0 = bool3(true, true, false);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool3 a1 = bool3(true, false, false);
            bool3 b1 = bool3(true, false, true);
            bool3 r1 = bool3(false, false, true);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool3 a2 = bool3(false, true, false);
            bool3 b2 = bool3(false, true, false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool3 a3 = bool3(false, true, true);
            bool3 b3 = bool3(false, false, true);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_xor_wide_scalar()
        {
            bool3 a0 = bool3(false, false, true);
            bool b0 = (false);
            bool3 r0 = bool3(false, false, true);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool3 a1 = bool3(true, false, false);
            bool b1 = (false);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool3 a2 = bool3(false, false, false);
            bool b2 = (false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool3 a3 = bool3(true, true, true);
            bool b3 = (false);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_xor_scalar_wide()
        {
            bool a0 = (true);
            bool3 b0 = bool3(true, false, true);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool a1 = (true);
            bool3 b1 = bool3(false, true, true);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool a2 = (false);
            bool3 b2 = bool3(false, true, true);
            bool3 r2 = bool3(false, true, true);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool a3 = (false);
            bool3 b3 = bool3(false, true, false);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool3_operator_logical_not()
        {
            bool3 a0 = bool3(true, true, false);
            bool3 r0 = bool3(false, false, true);
            TestUtils.AreEqual(r0, !a0);

            bool3 a1 = bool3(false, false, true);
            bool3 r1 = bool3(true, true, false);
            TestUtils.AreEqual(r1, !a1);

            bool3 a2 = bool3(false, false, false);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(r2, !a2);

            bool3 a3 = bool3(false, true, true);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(r3, !a3);
        }

        [TestCompiler]
        public static void bool3_swizzle()
        {
            var v = new bool3(false, true, false);
            TestUtils.AreEqual(bool4(false, false, false, false), v.xxxx);
            TestUtils.AreEqual(bool4(false, false, false, true), v.xxxy);
            TestUtils.AreEqual(bool4(false, false, false, false), v.xxxz);
            TestUtils.AreEqual(bool4(false, false, true, false), v.xxyx);
            TestUtils.AreEqual(bool4(false, false, true, true), v.xxyy);
            TestUtils.AreEqual(bool4(false, false, true, false), v.xxyz);
            TestUtils.AreEqual(bool4(false, false, false, false), v.xxzx);
            TestUtils.AreEqual(bool4(false, false, false, true), v.xxzy);
            TestUtils.AreEqual(bool4(false, false, false, false), v.xxzz);
            TestUtils.AreEqual(bool4(false, true, false, false), v.xyxx);
            TestUtils.AreEqual(bool4(false, true, false, true), v.xyxy);
            TestUtils.AreEqual(bool4(false, true, false, false), v.xyxz);
            TestUtils.AreEqual(bool4(false, true, true, false), v.xyyx);
            TestUtils.AreEqual(bool4(false, true, true, true), v.xyyy);
            TestUtils.AreEqual(bool4(false, true, true, false), v.xyyz);
            TestUtils.AreEqual(bool4(false, true, false, false), v.xyzx);
            TestUtils.AreEqual(bool4(false, true, false, true), v.xyzy);
            TestUtils.AreEqual(bool4(false, true, false, false), v.xyzz);
            TestUtils.AreEqual(bool4(false, false, false, false), v.xzxx);
            TestUtils.AreEqual(bool4(false, false, false, true), v.xzxy);
            TestUtils.AreEqual(bool4(false, false, false, false), v.xzxz);
            TestUtils.AreEqual(bool4(false, false, true, false), v.xzyx);
            TestUtils.AreEqual(bool4(false, false, true, true), v.xzyy);
            TestUtils.AreEqual(bool4(false, false, true, false), v.xzyz);
            TestUtils.AreEqual(bool4(false, false, false, false), v.xzzx);
            TestUtils.AreEqual(bool4(false, false, false, true), v.xzzy);
            TestUtils.AreEqual(bool4(false, false, false, false), v.xzzz);
            TestUtils.AreEqual(bool4(true, false, false, false), v.yxxx);
            TestUtils.AreEqual(bool4(true, false, false, true), v.yxxy);
            TestUtils.AreEqual(bool4(true, false, false, false), v.yxxz);
            TestUtils.AreEqual(bool4(true, false, true, false), v.yxyx);
            TestUtils.AreEqual(bool4(true, false, true, true), v.yxyy);
            TestUtils.AreEqual(bool4(true, false, true, false), v.yxyz);
            TestUtils.AreEqual(bool4(true, false, false, false), v.yxzx);
            TestUtils.AreEqual(bool4(true, false, false, true), v.yxzy);
            TestUtils.AreEqual(bool4(true, false, false, false), v.yxzz);
            TestUtils.AreEqual(bool4(true, true, false, false), v.yyxx);
            TestUtils.AreEqual(bool4(true, true, false, true), v.yyxy);
            TestUtils.AreEqual(bool4(true, true, false, false), v.yyxz);
            TestUtils.AreEqual(bool4(true, true, true, false), v.yyyx);
            TestUtils.AreEqual(bool4(true, true, true, true), v.yyyy);
            TestUtils.AreEqual(bool4(true, true, true, false), v.yyyz);
            TestUtils.AreEqual(bool4(true, true, false, false), v.yyzx);
            TestUtils.AreEqual(bool4(true, true, false, true), v.yyzy);
            TestUtils.AreEqual(bool4(true, true, false, false), v.yyzz);
            TestUtils.AreEqual(bool4(true, false, false, false), v.yzxx);
            TestUtils.AreEqual(bool4(true, false, false, true), v.yzxy);
            TestUtils.AreEqual(bool4(true, false, false, false), v.yzxz);
            TestUtils.AreEqual(bool4(true, false, true, false), v.yzyx);
            TestUtils.AreEqual(bool4(true, false, true, true), v.yzyy);
            TestUtils.AreEqual(bool4(true, false, true, false), v.yzyz);
            TestUtils.AreEqual(bool4(true, false, false, false), v.yzzx);
            TestUtils.AreEqual(bool4(true, false, false, true), v.yzzy);
            TestUtils.AreEqual(bool4(true, false, false, false), v.yzzz);
            TestUtils.AreEqual(bool4(false, false, false, false), v.zxxx);
            TestUtils.AreEqual(bool4(false, false, false, true), v.zxxy);
            TestUtils.AreEqual(bool4(false, false, false, false), v.zxxz);
            TestUtils.AreEqual(bool4(false, false, true, false), v.zxyx);
            TestUtils.AreEqual(bool4(false, false, true, true), v.zxyy);
            TestUtils.AreEqual(bool4(false, false, true, false), v.zxyz);
            TestUtils.AreEqual(bool4(false, false, false, false), v.zxzx);
            TestUtils.AreEqual(bool4(false, false, false, true), v.zxzy);
            TestUtils.AreEqual(bool4(false, false, false, false), v.zxzz);
            TestUtils.AreEqual(bool4(false, true, false, false), v.zyxx);
            TestUtils.AreEqual(bool4(false, true, false, true), v.zyxy);
            TestUtils.AreEqual(bool4(false, true, false, false), v.zyxz);
            TestUtils.AreEqual(bool4(false, true, true, false), v.zyyx);
            TestUtils.AreEqual(bool4(false, true, true, true), v.zyyy);
            TestUtils.AreEqual(bool4(false, true, true, false), v.zyyz);
            TestUtils.AreEqual(bool4(false, true, false, false), v.zyzx);
            TestUtils.AreEqual(bool4(false, true, false, true), v.zyzy);
            TestUtils.AreEqual(bool4(false, true, false, false), v.zyzz);
            TestUtils.AreEqual(bool4(false, false, false, false), v.zzxx);
            TestUtils.AreEqual(bool4(false, false, false, true), v.zzxy);
            TestUtils.AreEqual(bool4(false, false, false, false), v.zzxz);
            TestUtils.AreEqual(bool4(false, false, true, false), v.zzyx);
            TestUtils.AreEqual(bool4(false, false, true, true), v.zzyy);
            TestUtils.AreEqual(bool4(false, false, true, false), v.zzyz);
            TestUtils.AreEqual(bool4(false, false, false, false), v.zzzx);
            TestUtils.AreEqual(bool4(false, false, false, true), v.zzzy);
            TestUtils.AreEqual(bool4(false, false, false, false), v.zzzz);
            TestUtils.AreEqual(bool3(false, false, false), v.xxx);
            TestUtils.AreEqual(bool3(false, false, true), v.xxy);
            TestUtils.AreEqual(bool3(false, false, false), v.xxz);
            TestUtils.AreEqual(bool3(false, true, false), v.xyx);
            TestUtils.AreEqual(bool3(false, true, true), v.xyy);
            TestUtils.AreEqual(bool3(false, true, false), v.xyz);
            TestUtils.AreEqual(bool3(false, false, false), v.xzx);
            TestUtils.AreEqual(bool3(false, false, true), v.xzy);
            TestUtils.AreEqual(bool3(false, false, false), v.xzz);
            TestUtils.AreEqual(bool3(true, false, false), v.yxx);
            TestUtils.AreEqual(bool3(true, false, true), v.yxy);
            TestUtils.AreEqual(bool3(true, false, false), v.yxz);
            TestUtils.AreEqual(bool3(true, true, false), v.yyx);
            TestUtils.AreEqual(bool3(true, true, true), v.yyy);
            TestUtils.AreEqual(bool3(true, true, false), v.yyz);
            TestUtils.AreEqual(bool3(true, false, false), v.yzx);
            TestUtils.AreEqual(bool3(true, false, true), v.yzy);
            TestUtils.AreEqual(bool3(true, false, false), v.yzz);
            TestUtils.AreEqual(bool3(false, false, false), v.zxx);
            TestUtils.AreEqual(bool3(false, false, true), v.zxy);
            TestUtils.AreEqual(bool3(false, false, false), v.zxz);
            TestUtils.AreEqual(bool3(false, true, false), v.zyx);
            TestUtils.AreEqual(bool3(false, true, true), v.zyy);
            TestUtils.AreEqual(bool3(false, true, false), v.zyz);
            TestUtils.AreEqual(bool3(false, false, false), v.zzx);
            TestUtils.AreEqual(bool3(false, false, true), v.zzy);
            TestUtils.AreEqual(bool3(false, false, false), v.zzz);
            TestUtils.AreEqual(bool2(false, false), v.xx);
            TestUtils.AreEqual(bool2(false, true), v.xy);
            TestUtils.AreEqual(bool2(false, false), v.xz);
            TestUtils.AreEqual(bool2(true, false), v.yx);
            TestUtils.AreEqual(bool2(true, true), v.yy);
            TestUtils.AreEqual(bool2(true, false), v.yz);
            TestUtils.AreEqual(bool2(false, false), v.zx);
            TestUtils.AreEqual(bool2(false, true), v.zy);
            TestUtils.AreEqual(bool2(false, false), v.zz);
        }

        [TestCompiler]
        public static void bool3_colorswizzle()
        {
        }


    }
}
