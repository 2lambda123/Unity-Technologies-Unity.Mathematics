//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using static Unity.Mathematics.math;
using Burst.Compiler.IL.Tests;

namespace Unity.Mathematics.Tests
{
    [TestFixture]
    public class TestBool3
    {
        [TestCompiler]
        public static void bool3_constructor()
        {
            bool3 a = new bool3(false, true, false);
            TestUtils.AreEqual(false, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(false, a.z);
        }

        [TestCompiler]
        public static void bool3_scalar_constructor()
        {
            bool3 a = new bool3(true);
            TestUtils.AreEqual(true, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(true, a.z);
        }

        [TestCompiler]
        public static void bool3_static_constructor()
        {
            bool3 a = bool3(false, true, false);
            TestUtils.AreEqual(false, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(false, a.z);
        }

        [TestCompiler]
        public static void bool3_static_scalar_constructor()
        {
            bool3 a = bool3(true);
            TestUtils.AreEqual(true, a.x);
            TestUtils.AreEqual(true, a.y);
            TestUtils.AreEqual(true, a.z);
        }

        [TestCompiler]
        public static void bool3_operator_equal_wide_wide()
        {
            bool3 a0 = bool3(true, false, true);
            bool3 b0 = bool3(true, false, false);
            bool3 r0 = bool3(true, true, false);
            TestUtils.AreEqual(r0, a0 == b0);

            bool3 a1 = bool3(false, false, true);
            bool3 b1 = bool3(false, true, false);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 == b1);

            bool3 a2 = bool3(false, false, true);
            bool3 b2 = bool3(false, true, false);
            bool3 r2 = bool3(true, false, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool3 a3 = bool3(false, true, false);
            bool3 b3 = bool3(false, false, false);
            bool3 r3 = bool3(true, false, true);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool3_operator_equal_wide_scalar()
        {
            bool3 a0 = bool3(false, true, false);
            bool b0 = (true);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 == b0);

            bool3 a1 = bool3(false, false, true);
            bool b1 = (false);
            bool3 r1 = bool3(true, true, false);
            TestUtils.AreEqual(r1, a1 == b1);

            bool3 a2 = bool3(false, false, true);
            bool b2 = (false);
            bool3 r2 = bool3(true, true, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool3 a3 = bool3(true, true, false);
            bool b3 = (false);
            bool3 r3 = bool3(false, false, true);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool3_operator_equal_scalar_wide()
        {
            bool a0 = (false);
            bool3 b0 = bool3(true, false, true);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 == b0);

            bool a1 = (false);
            bool3 b1 = bool3(false, true, false);
            bool3 r1 = bool3(true, false, true);
            TestUtils.AreEqual(r1, a1 == b1);

            bool a2 = (false);
            bool3 b2 = bool3(true, false, true);
            bool3 r2 = bool3(false, true, false);
            TestUtils.AreEqual(r2, a2 == b2);

            bool a3 = (true);
            bool3 b3 = bool3(false, true, false);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 == b3);
        }

        [TestCompiler]
        public static void bool3_operator_not_equal_wide_wide()
        {
            bool3 a0 = bool3(true, true, true);
            bool3 b0 = bool3(true, false, false);
            bool3 r0 = bool3(false, true, true);
            TestUtils.AreEqual(r0, a0 != b0);

            bool3 a1 = bool3(false, false, true);
            bool3 b1 = bool3(false, true, false);
            bool3 r1 = bool3(false, true, true);
            TestUtils.AreEqual(r1, a1 != b1);

            bool3 a2 = bool3(false, false, false);
            bool3 b2 = bool3(false, false, false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 != b2);

            bool3 a3 = bool3(false, true, true);
            bool3 b3 = bool3(true, true, true);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool3_operator_not_equal_wide_scalar()
        {
            bool3 a0 = bool3(false, true, false);
            bool b0 = (false);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 != b0);

            bool3 a1 = bool3(true, false, false);
            bool b1 = (true);
            bool3 r1 = bool3(false, true, true);
            TestUtils.AreEqual(r1, a1 != b1);

            bool3 a2 = bool3(false, false, false);
            bool b2 = (false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 != b2);

            bool3 a3 = bool3(false, true, false);
            bool b3 = (false);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool3_operator_not_equal_scalar_wide()
        {
            bool a0 = (true);
            bool3 b0 = bool3(false, false, true);
            bool3 r0 = bool3(true, true, false);
            TestUtils.AreEqual(r0, a0 != b0);

            bool a1 = (false);
            bool3 b1 = bool3(false, false, true);
            bool3 r1 = bool3(false, false, true);
            TestUtils.AreEqual(r1, a1 != b1);

            bool a2 = (true);
            bool3 b2 = bool3(true, false, false);
            bool3 r2 = bool3(false, true, true);
            TestUtils.AreEqual(r2, a2 != b2);

            bool a3 = (false);
            bool3 b3 = bool3(false, false, true);
            bool3 r3 = bool3(false, false, true);
            TestUtils.AreEqual(r3, a3 != b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_and_wide_wide()
        {
            bool3 a0 = bool3(false, false, true);
            bool3 b0 = bool3(false, false, true);
            bool3 r0 = bool3(false, false, true);
            TestUtils.AreEqual(r0, a0 & b0);

            bool3 a1 = bool3(true, false, false);
            bool3 b1 = bool3(false, true, true);
            bool3 r1 = bool3(false, false, false);
            TestUtils.AreEqual(r1, a1 & b1);

            bool3 a2 = bool3(true, true, true);
            bool3 b2 = bool3(false, false, true);
            bool3 r2 = bool3(false, false, true);
            TestUtils.AreEqual(r2, a2 & b2);

            bool3 a3 = bool3(false, true, true);
            bool3 b3 = bool3(true, false, false);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_and_wide_scalar()
        {
            bool3 a0 = bool3(true, false, false);
            bool b0 = (true);
            bool3 r0 = bool3(true, false, false);
            TestUtils.AreEqual(r0, a0 & b0);

            bool3 a1 = bool3(true, false, false);
            bool b1 = (true);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 & b1);

            bool3 a2 = bool3(false, false, true);
            bool b2 = (false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 & b2);

            bool3 a3 = bool3(true, false, false);
            bool b3 = (true);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_and_scalar_wide()
        {
            bool a0 = (false);
            bool3 b0 = bool3(false, false, true);
            bool3 r0 = bool3(false, false, false);
            TestUtils.AreEqual(r0, a0 & b0);

            bool a1 = (true);
            bool3 b1 = bool3(true, false, true);
            bool3 r1 = bool3(true, false, true);
            TestUtils.AreEqual(r1, a1 & b1);

            bool a2 = (false);
            bool3 b2 = bool3(false, false, true);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 & b2);

            bool a3 = (false);
            bool3 b3 = bool3(false, false, true);
            bool3 r3 = bool3(false, false, false);
            TestUtils.AreEqual(r3, a3 & b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_or_wide_wide()
        {
            bool3 a0 = bool3(true, true, true);
            bool3 b0 = bool3(false, false, false);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool3 a1 = bool3(false, true, false);
            bool3 b1 = bool3(false, true, true);
            bool3 r1 = bool3(false, true, true);
            TestUtils.AreEqual(r1, a1 | b1);

            bool3 a2 = bool3(true, true, false);
            bool3 b2 = bool3(true, false, false);
            bool3 r2 = bool3(true, true, false);
            TestUtils.AreEqual(r2, a2 | b2);

            bool3 a3 = bool3(true, true, true);
            bool3 b3 = bool3(true, false, false);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_or_wide_scalar()
        {
            bool3 a0 = bool3(true, true, false);
            bool b0 = (true);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool3 a1 = bool3(true, true, true);
            bool b1 = (true);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(r1, a1 | b1);

            bool3 a2 = bool3(false, false, false);
            bool b2 = (true);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(r2, a2 | b2);

            bool3 a3 = bool3(true, false, true);
            bool b3 = (false);
            bool3 r3 = bool3(true, false, true);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_or_scalar_wide()
        {
            bool a0 = (true);
            bool3 b0 = bool3(true, true, false);
            bool3 r0 = bool3(true, true, true);
            TestUtils.AreEqual(r0, a0 | b0);

            bool a1 = (false);
            bool3 b1 = bool3(true, true, true);
            bool3 r1 = bool3(true, true, true);
            TestUtils.AreEqual(r1, a1 | b1);

            bool a2 = (false);
            bool3 b2 = bool3(false, true, true);
            bool3 r2 = bool3(false, true, true);
            TestUtils.AreEqual(r2, a2 | b2);

            bool a3 = (false);
            bool3 b3 = bool3(true, true, false);
            bool3 r3 = bool3(true, true, false);
            TestUtils.AreEqual(r3, a3 | b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_xor_wide_wide()
        {
            bool3 a0 = bool3(true, false, false);
            bool3 b0 = bool3(true, true, false);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool3 a1 = bool3(true, false, false);
            bool3 b1 = bool3(true, false, true);
            bool3 r1 = bool3(false, false, true);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool3 a2 = bool3(false, true, false);
            bool3 b2 = bool3(false, true, false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool3 a3 = bool3(false, true, true);
            bool3 b3 = bool3(false, false, true);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_xor_wide_scalar()
        {
            bool3 a0 = bool3(false, false, true);
            bool b0 = (false);
            bool3 r0 = bool3(false, false, true);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool3 a1 = bool3(true, false, false);
            bool b1 = (false);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool3 a2 = bool3(false, false, false);
            bool b2 = (false);
            bool3 r2 = bool3(false, false, false);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool3 a3 = bool3(true, true, true);
            bool b3 = (false);
            bool3 r3 = bool3(true, true, true);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool3_operator_bitwise_xor_scalar_wide()
        {
            bool a0 = (true);
            bool3 b0 = bool3(true, false, true);
            bool3 r0 = bool3(false, true, false);
            TestUtils.AreEqual(r0, a0 ^ b0);

            bool a1 = (true);
            bool3 b1 = bool3(false, true, true);
            bool3 r1 = bool3(true, false, false);
            TestUtils.AreEqual(r1, a1 ^ b1);

            bool a2 = (false);
            bool3 b2 = bool3(false, true, true);
            bool3 r2 = bool3(false, true, true);
            TestUtils.AreEqual(r2, a2 ^ b2);

            bool a3 = (false);
            bool3 b3 = bool3(false, true, false);
            bool3 r3 = bool3(false, true, false);
            TestUtils.AreEqual(r3, a3 ^ b3);
        }

        [TestCompiler]
        public static void bool3_operator_logical_not()
        {
            bool3 a0 = bool3(true, true, false);
            bool3 r0 = bool3(false, false, true);
            TestUtils.AreEqual(r0, !a0);

            bool3 a1 = bool3(false, false, true);
            bool3 r1 = bool3(true, true, false);
            TestUtils.AreEqual(r1, !a1);

            bool3 a2 = bool3(false, false, false);
            bool3 r2 = bool3(true, true, true);
            TestUtils.AreEqual(r2, !a2);

            bool3 a3 = bool3(false, true, true);
            bool3 r3 = bool3(true, false, false);
            TestUtils.AreEqual(r3, !a3);
        }

        [TestCompiler]
        public static void bool3_swizzle_getters()
        {
            var v1 = new bool3(false, true, false);
            var v2 = new bool3(true, false, true);

            TestUtils.AreEqual(bool4(false, false, false, false), v1.xxxx);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.xxxy);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.xxxz);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.xxyx);
            TestUtils.AreEqual(bool4(false, false, true, true), v1.xxyy);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.xxyz);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.xxzx);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.xxzy);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.xxzz);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.xyxx);
            TestUtils.AreEqual(bool4(false, true, false, true), v1.xyxy);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.xyxz);
            TestUtils.AreEqual(bool4(false, true, true, false), v1.xyyx);
            TestUtils.AreEqual(bool4(false, true, true, true), v1.xyyy);
            TestUtils.AreEqual(bool4(false, true, true, false), v1.xyyz);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.xyzx);
            TestUtils.AreEqual(bool4(false, true, false, true), v1.xyzy);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.xyzz);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.xzxx);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.xzxy);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.xzxz);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.xzyx);
            TestUtils.AreEqual(bool4(false, false, true, true), v1.xzyy);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.xzyz);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.xzzx);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.xzzy);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.xzzz);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.yxxx);
            TestUtils.AreEqual(bool4(true, false, false, true), v1.yxxy);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.yxxz);
            TestUtils.AreEqual(bool4(true, false, true, false), v1.yxyx);
            TestUtils.AreEqual(bool4(true, false, true, true), v1.yxyy);
            TestUtils.AreEqual(bool4(true, false, true, false), v1.yxyz);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.yxzx);
            TestUtils.AreEqual(bool4(true, false, false, true), v1.yxzy);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.yxzz);
            TestUtils.AreEqual(bool4(true, true, false, false), v1.yyxx);
            TestUtils.AreEqual(bool4(true, true, false, true), v1.yyxy);
            TestUtils.AreEqual(bool4(true, true, false, false), v1.yyxz);
            TestUtils.AreEqual(bool4(true, true, true, false), v1.yyyx);
            TestUtils.AreEqual(bool4(true, true, true, true), v1.yyyy);
            TestUtils.AreEqual(bool4(true, true, true, false), v1.yyyz);
            TestUtils.AreEqual(bool4(true, true, false, false), v1.yyzx);
            TestUtils.AreEqual(bool4(true, true, false, true), v1.yyzy);
            TestUtils.AreEqual(bool4(true, true, false, false), v1.yyzz);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.yzxx);
            TestUtils.AreEqual(bool4(true, false, false, true), v1.yzxy);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.yzxz);
            TestUtils.AreEqual(bool4(true, false, true, false), v1.yzyx);
            TestUtils.AreEqual(bool4(true, false, true, true), v1.yzyy);
            TestUtils.AreEqual(bool4(true, false, true, false), v1.yzyz);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.yzzx);
            TestUtils.AreEqual(bool4(true, false, false, true), v1.yzzy);
            TestUtils.AreEqual(bool4(true, false, false, false), v1.yzzz);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.zxxx);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.zxxy);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.zxxz);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.zxyx);
            TestUtils.AreEqual(bool4(false, false, true, true), v1.zxyy);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.zxyz);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.zxzx);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.zxzy);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.zxzz);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.zyxx);
            TestUtils.AreEqual(bool4(false, true, false, true), v1.zyxy);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.zyxz);
            TestUtils.AreEqual(bool4(false, true, true, false), v1.zyyx);
            TestUtils.AreEqual(bool4(false, true, true, true), v1.zyyy);
            TestUtils.AreEqual(bool4(false, true, true, false), v1.zyyz);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.zyzx);
            TestUtils.AreEqual(bool4(false, true, false, true), v1.zyzy);
            TestUtils.AreEqual(bool4(false, true, false, false), v1.zyzz);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.zzxx);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.zzxy);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.zzxz);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.zzyx);
            TestUtils.AreEqual(bool4(false, false, true, true), v1.zzyy);
            TestUtils.AreEqual(bool4(false, false, true, false), v1.zzyz);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.zzzx);
            TestUtils.AreEqual(bool4(false, false, false, true), v1.zzzy);
            TestUtils.AreEqual(bool4(false, false, false, false), v1.zzzz);
            TestUtils.AreEqual(bool3(false, false, false), v1.xxx);
            TestUtils.AreEqual(bool3(false, false, true), v1.xxy);
            TestUtils.AreEqual(bool3(false, false, false), v1.xxz);
            TestUtils.AreEqual(bool3(false, true, false), v1.xyx);
            TestUtils.AreEqual(bool3(false, true, true), v1.xyy);
            TestUtils.AreEqual(bool3(false, true, false), v1.xyz);
            TestUtils.AreEqual(bool3(false, false, false), v1.xzx);
            TestUtils.AreEqual(bool3(false, false, true), v1.xzy);
            TestUtils.AreEqual(bool3(false, false, false), v1.xzz);
            TestUtils.AreEqual(bool3(true, false, false), v1.yxx);
            TestUtils.AreEqual(bool3(true, false, true), v1.yxy);
            TestUtils.AreEqual(bool3(true, false, false), v1.yxz);
            TestUtils.AreEqual(bool3(true, true, false), v1.yyx);
            TestUtils.AreEqual(bool3(true, true, true), v1.yyy);
            TestUtils.AreEqual(bool3(true, true, false), v1.yyz);
            TestUtils.AreEqual(bool3(true, false, false), v1.yzx);
            TestUtils.AreEqual(bool3(true, false, true), v1.yzy);
            TestUtils.AreEqual(bool3(true, false, false), v1.yzz);
            TestUtils.AreEqual(bool3(false, false, false), v1.zxx);
            TestUtils.AreEqual(bool3(false, false, true), v1.zxy);
            TestUtils.AreEqual(bool3(false, false, false), v1.zxz);
            TestUtils.AreEqual(bool3(false, true, false), v1.zyx);
            TestUtils.AreEqual(bool3(false, true, true), v1.zyy);
            TestUtils.AreEqual(bool3(false, true, false), v1.zyz);
            TestUtils.AreEqual(bool3(false, false, false), v1.zzx);
            TestUtils.AreEqual(bool3(false, false, true), v1.zzy);
            TestUtils.AreEqual(bool3(false, false, false), v1.zzz);
            TestUtils.AreEqual(bool2(false, false), v1.xx);
            TestUtils.AreEqual(bool2(false, true), v1.xy);
            TestUtils.AreEqual(bool2(false, false), v1.xz);
            TestUtils.AreEqual(bool2(true, false), v1.yx);
            TestUtils.AreEqual(bool2(true, true), v1.yy);
            TestUtils.AreEqual(bool2(true, false), v1.yz);
            TestUtils.AreEqual(bool2(false, false), v1.zx);
            TestUtils.AreEqual(bool2(false, true), v1.zy);
            TestUtils.AreEqual(bool2(false, false), v1.zz);
        }

        [TestCompiler]
        public static void bool3_swizzle_setters()
        {
            var v1 = new bool3(false, true, false);
            var v2 = new bool3(true, false, true);

            var set = new bool3();

            set = v1;
            set.xyz = v1.xyz;
            TestUtils.AreEqual(bool3(false, true, false), set);
            set = v1;
            set.xzy = v1.xyz;
            TestUtils.AreEqual(bool3(false, false, true), set);
            set = v1;
            set.yxz = v1.xyz;
            TestUtils.AreEqual(bool3(true, false, false), set);
            set = v1;
            set.yzx = v1.xyz;
            TestUtils.AreEqual(bool3(false, false, true), set);
            set = v1;
            set.zxy = v1.xyz;
            TestUtils.AreEqual(bool3(true, false, false), set);
            set = v1;
            set.zyx = v1.xyz;
            TestUtils.AreEqual(bool3(false, true, false), set);
            set = v1;
            set.xy = v1.xy;
            TestUtils.AreEqual(bool3(false, true, false), set);
            set = v1;
            set.xz = v1.xy;
            TestUtils.AreEqual(bool3(false, true, true), set);
            set = v1;
            set.yx = v1.xy;
            TestUtils.AreEqual(bool3(true, false, false), set);
            set = v1;
            set.yz = v1.xy;
            TestUtils.AreEqual(bool3(false, false, true), set);
            set = v1;
            set.zx = v1.xy;
            TestUtils.AreEqual(bool3(true, true, false), set);
            set = v1;
            set.zy = v1.xy;
            TestUtils.AreEqual(bool3(false, true, false), set);
        }

        [TestCompiler]
        public static void bool3_colorswizzle()
        {
        }


    }
}
