//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using static Unity.Mathematics.math;
using Burst.Compiler.IL.Tests;

namespace Unity.Mathematics.Tests
{
    [TestFixture]
    public class TestFloat3x3
    {
        [TestCompiler]
        public static void float3x3_zero()
        {
            TestUtils.AreEqual(float3x3.zero.c0.x, 0.0f);
            TestUtils.AreEqual(float3x3.zero.c0.y, 0.0f);
            TestUtils.AreEqual(float3x3.zero.c0.z, 0.0f);
            TestUtils.AreEqual(float3x3.zero.c1.x, 0.0f);
            TestUtils.AreEqual(float3x3.zero.c1.y, 0.0f);
            TestUtils.AreEqual(float3x3.zero.c1.z, 0.0f);
            TestUtils.AreEqual(float3x3.zero.c2.x, 0.0f);
            TestUtils.AreEqual(float3x3.zero.c2.y, 0.0f);
            TestUtils.AreEqual(float3x3.zero.c2.z, 0.0f);
        }

        [TestCompiler]
        public static void float3x3_identity()
        {
            TestUtils.AreEqual(float3x3.identity.c0.x, 1.0f);
            TestUtils.AreEqual(float3x3.identity.c0.y, 0.0f);
            TestUtils.AreEqual(float3x3.identity.c0.z, 0.0f);
            TestUtils.AreEqual(float3x3.identity.c1.x, 0.0f);
            TestUtils.AreEqual(float3x3.identity.c1.y, 1.0f);
            TestUtils.AreEqual(float3x3.identity.c1.z, 0.0f);
            TestUtils.AreEqual(float3x3.identity.c2.x, 0.0f);
            TestUtils.AreEqual(float3x3.identity.c2.y, 0.0f);
            TestUtils.AreEqual(float3x3.identity.c2.z, 1.0f);
        }

        [TestCompiler]
        public static void float3x3_operator_equal_wide_wide()
        {
            float3x3 a0 = float3x3(331.744141f, -417.6833f, -438.450867f, -57.99066f, -183.1134f, 72.3228149f, -292.706116f, -181.376923f, 43.84778f);
            float3x3 b0 = float3x3(-426.582825f, 431.344543f, 263.339172f, -309.3919f, 391.1996f, -468.237274f, -389.9116f, -192.672028f, -8.950195f);
            bool3x3 r0 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            float3x3 a1 = float3x3(481.287354f, 258.4253f, 352.580444f, 70.85327f, -41.08313f, -501.143951f, 469.417725f, 379.497925f, -174.4578f);
            float3x3 b1 = float3x3(-339.086975f, 104.677917f, -443.5048f, 358.640137f, -415.7492f, -141.969635f, 379.130066f, 56.10376f, 132.809509f);
            bool3x3 r1 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            float3x3 a2 = float3x3(-456.507446f, 172.215576f, 258.43927f, 509.8202f, -199.17569f, 194.292358f, 448.9026f, -419.461578f, -267.8828f);
            float3x3 b2 = float3x3(-233.776184f, -159.645721f, 369.805054f, 41.04828f, 316.684326f, -258.031738f, -239.097748f, -181.013641f, 241.82428f);
            bool3x3 r2 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            float3x3 a3 = float3x3(405.6131f, -267.163269f, -151.508728f, -207.5777f, -320.248f, 433.78186f, -335.735229f, 296.5462f, -248.164581f);
            float3x3 b3 = float3x3(-284.933777f, -486.1785f, -285.091f, -154.241455f, 470.856262f, 205.192749f, 163.190125f, 197.813538f, -234.376038f);
            bool3x3 r3 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_equal_wide_scalar()
        {
            float3x3 a0 = float3x3(327.101929f, 440.467224f, -443.745178f, 325.546265f, 435.371765f, 58.38208f, -398.435f, 377.0666f, 445.502136f);
            float b0 = (342.440552f);
            bool3x3 r0 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            float3x3 a1 = float3x3(-17.7927246f, -350.2315f, 450.236755f, 14.9833374f, -504.426971f, 412.488525f, 454.7033f, 289.2917f, 356.93158f);
            float b1 = (-92.37259f);
            bool3x3 r1 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            float3x3 a2 = float3x3(413.762878f, -481.17157f, 355.5678f, -235.840881f, 322.297729f, 114.381042f, 352.201782f, -335.634521f, 273.712158f);
            float b2 = (233.3728f);
            bool3x3 r2 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            float3x3 a3 = float3x3(98.97534f, 260.326843f, -154.797943f, -40.9360046f, 482.790283f, -244.18042f, 150.705566f, 46.6643066f, 510.5437f);
            float b3 = (-173.683014f);
            bool3x3 r3 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_equal_scalar_wide()
        {
            float a0 = (430.781128f);
            float3x3 b0 = float3x3(-434.727478f, 103.730347f, -263.03656f, -224.560181f, 204.110779f, 196.568237f, -424.756561f, 467.4505f, -45.4336243f);
            bool3x3 r0 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            float a1 = (138.191589f);
            float3x3 b1 = float3x3(181.061951f, -449.2158f, -335.154449f, -77.46622f, 107.902405f, -330.9517f, -115.29895f, 244.522888f, -481.4762f);
            bool3x3 r1 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            float a2 = (134.603821f);
            float3x3 b2 = float3x3(-208.271637f, 420.9162f, -464.2389f, 64.91498f, 62.8317261f, -429.80426f, -5.533844f, 21.2402954f, 261.038635f);
            bool3x3 r2 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            float a3 = (-30.1661377f);
            float3x3 b3 = float3x3(-380.670441f, 235.491638f, -322.037445f, 450.00824f, 375.5432f, -369.7356f, 278.307922f, 429.931946f, 26.0113525f);
            bool3x3 r3 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_not_equal_wide_wide()
        {
            float3x3 a0 = float3x3(19.2539673f, 121.335449f, 468.3097f, -212.365448f, -410.633484f, 507.534241f, 52.20117f, -319.6424f, -448.9063f);
            float3x3 b0 = float3x3(-249.066345f, -19.0466f, 323.622559f, 294.941956f, -492.460968f, -166.483276f, 421.1953f, 87.6629f, 193.875122f);
            bool3x3 r0 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            float3x3 a1 = float3x3(255.3703f, -70.46268f, -18.9137878f, -131.624084f, 288.074951f, 290.717957f, 191.2832f, -220.54245f, 404.7948f);
            float3x3 b1 = float3x3(-279.289825f, 158.513611f, 426.635132f, -404.547821f, 480.740479f, -184.480316f, 355.445068f, 414.6756f, -134.759186f);
            bool3x3 r1 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            float3x3 a2 = float3x3(-266.012451f, 258.967346f, -375.447144f, 124.137634f, -395.242065f, 154.09259f, -270.3957f, 265.8225f, -70.6264343f);
            float3x3 b2 = float3x3(-458.719055f, -43.3425f, -446.3987f, -50.54947f, -142.774689f, -462.0124f, 511.044678f, -497.399323f, -267.937927f);
            bool3x3 r2 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            float3x3 a3 = float3x3(-431.107422f, 281.847473f, -399.4225f, -476.4524f, -507.77597f, -171.744171f, -457.940826f, -495.599457f, -158.324646f);
            float3x3 b3 = float3x3(372.740356f, 206.700317f, 360.857483f, -181.105927f, 285.8468f, -359.910828f, 149.525635f, 327.11676f, -502.187256f);
            bool3x3 r3 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_not_equal_wide_scalar()
        {
            float3x3 a0 = float3x3(-418.022278f, 231.448242f, -469.478516f, -94.97409f, -376.084381f, -428.119019f, 492.9278f, -91.33383f, 80.41858f);
            float b0 = (-206.336578f);
            bool3x3 r0 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            float3x3 a1 = float3x3(-124.39093f, 353.96106f, 170.989319f, -494.895752f, 181.015137f, -180.176971f, 324.904724f, 365.89978f, 86.04675f);
            float b1 = (-409.290527f);
            bool3x3 r1 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            float3x3 a2 = float3x3(75.14545f, 504.517944f, 385.4771f, -221.906036f, 237.351563f, 401.893555f, -418.3873f, -235.435944f, 449.5686f);
            float b2 = (-505.780518f);
            bool3x3 r2 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            float3x3 a3 = float3x3(242.233826f, 434.6377f, 111.69043f, 503.1595f, 450.927917f, -376.869751f, 264.2846f, -50.7024536f, -102.235168f);
            float b3 = (-117.3277f);
            bool3x3 r3 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_not_equal_scalar_wide()
        {
            float a0 = (357.343384f);
            float3x3 b0 = float3x3(192.976379f, -323.1933f, -25.1252441f, -270.503082f, -454.426819f, -458.8189f, -274.5384f, 127.642212f, -43.8877258f);
            bool3x3 r0 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            float a1 = (-179.47229f);
            float3x3 b1 = float3x3(498.287659f, -333.8144f, -169.487946f, -146.258789f, -33.028656f, 156.743591f, -285.206543f, -10.882843f, 259.283447f);
            bool3x3 r1 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            float a2 = (-469.940765f);
            float3x3 b2 = float3x3(46.4143066f, -415.384338f, 311.547668f, 244.515991f, 110.527771f, -290.509644f, -53.821167f, -362.343781f, -455.7852f);
            bool3x3 r2 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            float a3 = (-199.0863f);
            float3x3 b3 = float3x3(298.186951f, 319.69635f, 346.52832f, -314.9336f, -106.494812f, 324.17688f, 394.819275f, -341.915222f, -461.862549f);
            bool3x3 r3 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_less_wide_wide()
        {
            float3x3 a0 = float3x3(487.8249f, -508.921722f, 53.8760376f, 443.786926f, -81.07861f, 103.165527f, -496.199768f, 30.0013428f, 490.884521f);
            float3x3 b0 = float3x3(453.097351f, -123.830566f, 492.750122f, 434.46344f, -402.464783f, -480.752319f, 317.300659f, 175.821045f, 301.866333f);
            bool3x3 r0 = bool3x3(false, true, true, false, false, false, true, true, false);
            TestUtils.AreEqual(a0 < b0, r0);

            float3x3 a1 = float3x3(485.697083f, -360.631073f, -442.654358f, -310.858032f, -142.116028f, -131.921722f, -279.917725f, -335.161621f, 207.237366f);
            float3x3 b1 = float3x3(77.77667f, -188.57605f, 479.3379f, -393.342255f, 21.69635f, 151.5708f, -115.47818f, -417.1082f, -272.838745f);
            bool3x3 r1 = bool3x3(false, true, true, false, true, true, true, false, false);
            TestUtils.AreEqual(a1 < b1, r1);

            float3x3 a2 = float3x3(267.394043f, 259.686523f, 197.362366f, 378.0946f, -358.618958f, -187.3323f, -367.859619f, -268.33905f, 301.925049f);
            float3x3 b2 = float3x3(210.978516f, -355.154755f, 183.079834f, -260.3083f, 312.9527f, 383.91626f, -170.578735f, 102.495972f, 477.086f);
            bool3x3 r2 = bool3x3(false, false, false, false, true, true, true, true, true);
            TestUtils.AreEqual(a2 < b2, r2);

            float3x3 a3 = float3x3(-455.977753f, 383.7517f, -324.972565f, 122.86615f, 54.38513f, 389.452942f, 366.4093f, -401.936737f, 420.427f);
            float3x3 b3 = float3x3(164.40094f, -476.2596f, -64.78168f, -89.9094238f, 279.3506f, -293.356323f, 432.908447f, -209.159943f, -232.094f);
            bool3x3 r3 = bool3x3(true, false, true, false, true, false, true, true, false);
            TestUtils.AreEqual(a3 < b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_less_wide_scalar()
        {
            float3x3 a0 = float3x3(18.1535645f, -409.346466f, 180.7865f, -185.154968f, 228.264709f, 124.125732f, 265.743835f, -307.545563f, 493.123169f);
            float b0 = (152.320862f);
            bool3x3 r0 = bool3x3(true, true, false, true, false, true, false, true, false);
            TestUtils.AreEqual(a0 < b0, r0);

            float3x3 a1 = float3x3(36.3736572f, 85.93457f, -89.3711853f, -36.8948059f, -491.257172f, -193.741882f, -320.661f, 424.3283f, -392.517334f);
            float b1 = (131.67981f);
            bool3x3 r1 = bool3x3(true, true, true, true, true, true, true, false, true);
            TestUtils.AreEqual(a1 < b1, r1);

            float3x3 a2 = float3x3(435.076416f, 350.0327f, -108.90918f, -9.381622f, 109.856995f, -377.404f, -91.78177f, -197.499542f, -324.0164f);
            float b2 = (181.86554f);
            bool3x3 r2 = bool3x3(false, false, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a2 < b2, r2);

            float3x3 a3 = float3x3(-414.565826f, -107.000946f, 364.8946f, 246.614075f, 337.6457f, -130.2493f, 309.737122f, 219.850952f, -29.4940186f);
            float b3 = (-141.8559f);
            bool3x3 r3 = bool3x3(true, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a3 < b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_less_scalar_wide()
        {
            float a0 = (416.681274f);
            float3x3 b0 = float3x3(-105.389069f, -389.2496f, 408.846863f, -87.03952f, 268.691345f, -470.20163f, 271.315674f, -170.322723f, -156.598419f);
            bool3x3 r0 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a0 < b0, r0);

            float a1 = (-0.2886963f);
            float3x3 b1 = float3x3(72.09082f, -54.4299927f, 191.603271f, 370.544f, 283.232422f, -362.762024f, -145.500977f, 315.129883f, 340.8296f);
            bool3x3 r1 = bool3x3(true, false, true, true, true, false, false, true, true);
            TestUtils.AreEqual(a1 < b1, r1);

            float a2 = (-60.229248f);
            float3x3 b2 = float3x3(-194.843689f, -261.056763f, -246.825867f, 91.5376f, -233.5228f, 16.3255615f, -44.0384827f, 49.5278931f, -161.31601f);
            bool3x3 r2 = bool3x3(false, false, false, true, false, true, true, true, false);
            TestUtils.AreEqual(a2 < b2, r2);

            float a3 = (230.163574f);
            float3x3 b3 = float3x3(-341.875549f, 87.1088257f, 229.0669f, 53.4827271f, 353.14386f, -435.014648f, -349.595825f, 272.964172f, -335.467438f);
            bool3x3 r3 = bool3x3(false, false, false, false, true, false, false, true, false);
            TestUtils.AreEqual(a3 < b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_greater_wide_wide()
        {
            float3x3 a0 = float3x3(-188.03302f, 234.300232f, -56.30594f, 240.958374f, 501.4876f, -303.425f, -305.5091f, -470.742554f, -305.090759f);
            float3x3 b0 = float3x3(-17.4008179f, -59.53961f, -24.2853088f, 222.387512f, -207.170441f, 365.5465f, 183.5733f, -23.080719f, 337.163818f);
            bool3x3 r0 = bool3x3(false, true, false, true, true, false, false, false, false);
            TestUtils.AreEqual(a0 > b0, r0);

            float3x3 a1 = float3x3(26.0454712f, 169.997375f, -498.388031f, 270.142944f, 69.6588745f, -163.975159f, 273.174133f, 193.8711f, -157.939331f);
            float3x3 b1 = float3x3(175.811768f, -8.514038f, -125.865387f, -212.857056f, 12.6571045f, 134.17511f, -101.511993f, -505.14505f, -150.596619f);
            bool3x3 r1 = bool3x3(false, true, false, true, true, false, true, true, false);
            TestUtils.AreEqual(a1 > b1, r1);

            float3x3 a2 = float3x3(439.0537f, 414.232666f, -246.558075f, 326.2243f, -457.296661f, -338.94574f, 310.630127f, -134.709412f, 485.6823f);
            float3x3 b2 = float3x3(286.160583f, 358.075439f, 105.754028f, 61.5240479f, 144.405334f, -298.4254f, 485.263245f, -341.976929f, 74.8334351f);
            bool3x3 r2 = bool3x3(true, true, false, true, false, false, false, true, true);
            TestUtils.AreEqual(a2 > b2, r2);

            float3x3 a3 = float3x3(-400.953827f, -31.0127869f, 182.317444f, 418.0558f, -125.63736f, 31.6554565f, -340.324646f, -170.487366f, 49.8656f);
            float3x3 b3 = float3x3(332.481018f, -151.834412f, -355.448883f, -283.69873f, -144.6875f, 310.086975f, -312.364044f, 191.854065f, -79.25134f);
            bool3x3 r3 = bool3x3(false, true, true, true, true, false, false, false, true);
            TestUtils.AreEqual(a3 > b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_greater_wide_scalar()
        {
            float3x3 a0 = float3x3(468.8808f, -355.421021f, -45.708252f, 407.176575f, 348.72522f, 418.545349f, -422.750183f, -364.2755f, 434.163635f);
            float b0 = (201.802734f);
            bool3x3 r0 = bool3x3(true, false, false, true, true, true, false, false, true);
            TestUtils.AreEqual(a0 > b0, r0);

            float3x3 a1 = float3x3(-255.049072f, 379.823364f, -346.942383f, -121.102142f, 164.48761f, -282.735718f, 437.083984f, 15.6209717f, 208.428467f);
            float b1 = (178.8064f);
            bool3x3 r1 = bool3x3(false, true, false, false, false, false, true, false, true);
            TestUtils.AreEqual(a1 > b1, r1);

            float3x3 a2 = float3x3(-509.6458f, 127.584412f, 488.46167f, -162.216888f, 301.607727f, -345.053375f, -76.30057f, -238.100464f, -238.177124f);
            float b2 = (-293.801758f);
            bool3x3 r2 = bool3x3(false, true, true, true, true, false, true, true, true);
            TestUtils.AreEqual(a2 > b2, r2);

            float3x3 a3 = float3x3(-42.973877f, 277.377869f, -130.1195f, -142.3913f, 100.413269f, -137.017181f, -7.19000244f, 237.227966f, 96.94458f);
            float b3 = (-427.231781f);
            bool3x3 r3 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a3 > b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_greater_scalar_wide()
        {
            float a0 = (137.504211f);
            float3x3 b0 = float3x3(-443.866821f, 279.852783f, -462.4043f, -280.713776f, 120.712769f, -31.6700134f, 363.428345f, 263.125427f, -156.36087f);
            bool3x3 r0 = bool3x3(true, false, true, true, true, true, false, false, true);
            TestUtils.AreEqual(a0 > b0, r0);

            float a1 = (66.3540039f);
            float3x3 b1 = float3x3(-303.1296f, 419.3374f, -392.721069f, -378.762939f, -398.361145f, -314.282471f, 89.5307f, 408.407166f, 303.3543f);
            bool3x3 r1 = bool3x3(true, false, true, true, true, true, false, false, false);
            TestUtils.AreEqual(a1 > b1, r1);

            float a2 = (16.916748f);
            float3x3 b2 = float3x3(-425.384216f, 205.63916f, -181.906982f, 256.7876f, -272.8026f, -192.998962f, 457.5393f, -12.8081055f, 421.600769f);
            bool3x3 r2 = bool3x3(true, false, true, false, true, true, false, true, false);
            TestUtils.AreEqual(a2 > b2, r2);

            float a3 = (-235.210266f);
            float3x3 b3 = float3x3(-483.95105f, 157.529114f, 193.490845f, -301.340332f, -252.4213f, 181.764282f, -272.323181f, 162.383667f, -384.406525f);
            bool3x3 r3 = bool3x3(true, false, false, true, true, false, true, false, true);
            TestUtils.AreEqual(a3 > b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_less_equal_wide_wide()
        {
            float3x3 a0 = float3x3(333.0476f, 239.35083f, 26.5692139f, 41.4924927f, -162.662354f, -271.002747f, -108.986206f, 392.0816f, 314.488647f);
            float3x3 b0 = float3x3(46.1311646f, -378.082336f, -466.7782f, -173.335022f, -482.2393f, 183.3465f, 399.076172f, -127.637085f, -118.196838f);
            bool3x3 r0 = bool3x3(false, false, false, false, false, true, true, false, false);
            TestUtils.AreEqual(a0 <= b0, r0);

            float3x3 a1 = float3x3(208.102173f, 39.9359741f, 458.7705f, -404.075f, 359.389954f, 405.929749f, -463.0184f, -459.443024f, 271.79187f);
            float3x3 b1 = float3x3(-329.727448f, -208.817627f, 368.286865f, 68.84564f, 452.365234f, -255.050629f, 440.1126f, -138.225769f, -237.159058f);
            bool3x3 r1 = bool3x3(false, false, false, true, true, false, true, true, false);
            TestUtils.AreEqual(a1 <= b1, r1);

            float3x3 a2 = float3x3(73.09076f, 263.657959f, -355.346161f, -184.612061f, -320.97345f, 340.874939f, 226.31f, 186.879822f, -130.892334f);
            float3x3 b2 = float3x3(201.343079f, -403.248749f, 230.682983f, -57.3156433f, 124.1311f, 38.1745f, 209.631958f, 236.809814f, 485.7528f);
            bool3x3 r2 = bool3x3(true, false, true, true, true, false, false, true, true);
            TestUtils.AreEqual(a2 <= b2, r2);

            float3x3 a3 = float3x3(-315.204651f, 99.36072f, -486.007324f, -314.168152f, -67.26477f, 492.7791f, 130.789551f, -384.7157f, 311.272217f);
            float3x3 b3 = float3x3(29.8652344f, 383.063965f, 469.723572f, 101.127319f, -419.6117f, -199.115326f, -482.760468f, 117.240662f, -398.854431f);
            bool3x3 r3 = bool3x3(true, true, true, true, false, false, false, true, false);
            TestUtils.AreEqual(a3 <= b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_less_equal_wide_scalar()
        {
            float3x3 a0 = float3x3(122.817688f, -283.694275f, -288.847656f, -185.453918f, -315.2539f, 279.5738f, -317.959167f, -255.5698f, -368.803284f);
            float b0 = (-181.943909f);
            bool3x3 r0 = bool3x3(false, true, true, true, true, false, true, true, true);
            TestUtils.AreEqual(a0 <= b0, r0);

            float3x3 a1 = float3x3(-132.488861f, -328.492218f, -115.355896f, -192.5214f, 454.183838f, -38.063385f, 509.92865f, -410.584534f, -231.749481f);
            float b1 = (-207.253967f);
            bool3x3 r1 = bool3x3(false, true, false, false, false, false, false, true, true);
            TestUtils.AreEqual(a1 <= b1, r1);

            float3x3 a2 = float3x3(179.05542f, 228.502563f, 320.4897f, 65.78052f, 157.06311f, 126.580139f, -476.033325f, 441.4171f, -281.348267f);
            float b2 = (-253.84079f);
            bool3x3 r2 = bool3x3(false, false, false, false, false, false, true, false, true);
            TestUtils.AreEqual(a2 <= b2, r2);

            float3x3 a3 = float3x3(145.758118f, 365.085327f, -483.509583f, -37.3781128f, -168.46701f, 215.754883f, 403.4709f, -101.321106f, 129.15509f);
            float b3 = (403.821838f);
            bool3x3 r3 = bool3x3(true, true, true, true, true, true, true, true, true);
            TestUtils.AreEqual(a3 <= b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_less_equal_scalar_wide()
        {
            float a0 = (-336.4657f);
            float3x3 b0 = float3x3(251.958374f, -22.8583069f, -238.905853f, 284.666626f, -358.324f, 468.530273f, -439.037231f, -197.067688f, -367.59552f);
            bool3x3 r0 = bool3x3(true, true, true, true, false, true, false, true, false);
            TestUtils.AreEqual(a0 <= b0, r0);

            float a1 = (-143.895081f);
            float3x3 b1 = float3x3(-387.8427f, -88.23752f, 439.360535f, -487.9847f, -393.415863f, 399.102478f, 365.36438f, -225.015259f, -305.5796f);
            bool3x3 r1 = bool3x3(false, true, true, false, false, true, true, false, false);
            TestUtils.AreEqual(a1 <= b1, r1);

            float a2 = (-155.50473f);
            float3x3 b2 = float3x3(-241.3457f, -22.9373779f, -113.94046f, 421.051025f, -493.358154f, -422.88028f, 27.0828857f, -505.903076f, 470.219849f);
            bool3x3 r2 = bool3x3(false, true, true, true, false, false, true, false, true);
            TestUtils.AreEqual(a2 <= b2, r2);

            float a3 = (399.418335f);
            float3x3 b3 = float3x3(312.550354f, -309.136749f, -317.886841f, -501.4554f, -73.50827f, 54.2999268f, -311.153778f, -112.9451f, -479.154938f);
            bool3x3 r3 = bool3x3(false, false, false, false, false, false, false, false, false);
            TestUtils.AreEqual(a3 <= b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_greater_equal_wide_wide()
        {
            float3x3 a0 = float3x3(143.641235f, -251.704163f, 118.576172f, 23.871582f, 84.63403f, -145.382233f, -234.447327f, 90.46185f, 203.555847f);
            float3x3 b0 = float3x3(-409.271027f, -84.91385f, 509.1283f, -61.13452f, 139.217224f, -30.2294312f, 210.736267f, 27.0149536f, 467.682922f);
            bool3x3 r0 = bool3x3(true, false, false, true, false, false, false, true, false);
            TestUtils.AreEqual(a0 >= b0, r0);

            float3x3 a1 = float3x3(370.9796f, -64.08972f, -140.503021f, -61.64731f, 463.918945f, -81.43878f, -56.36319f, 39.7544556f, -389.112549f);
            float3x3 b1 = float3x3(-206.05484f, 109.552368f, -413.970337f, 95.38501f, -493.097656f, 330.596924f, 106.934875f, -316.19577f, 206.490479f);
            bool3x3 r1 = bool3x3(true, false, true, false, true, false, false, true, false);
            TestUtils.AreEqual(a1 >= b1, r1);

            float3x3 a2 = float3x3(117.347229f, -460.3187f, -209.221191f, -223.7843f, -36.6575928f, 488.5995f, 437.58728f, -330.4093f, -373.0106f);
            float3x3 b2 = float3x3(114.226807f, 54.4406128f, -242.842743f, 240.4956f, 151.109375f, 165.143127f, 92.21735f, 13.223999f, 204.379517f);
            bool3x3 r2 = bool3x3(true, false, true, false, false, true, true, false, false);
            TestUtils.AreEqual(a2 >= b2, r2);

            float3x3 a3 = float3x3(-352.3084f, 243.232f, 488.733459f, -466.79068f, -491.69577f, -316.419617f, 442.0161f, 87.8488159f, 421.667725f);
            float3x3 b3 = float3x3(-477.9111f, -349.733826f, -488.808838f, 4.96923828f, 266.0371f, 259.682922f, -430.251556f, 395.971375f, -422.670959f);
            bool3x3 r3 = bool3x3(true, true, true, false, false, false, true, false, true);
            TestUtils.AreEqual(a3 >= b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_greater_equal_wide_scalar()
        {
            float3x3 a0 = float3x3(-355.36084f, 304.301453f, 385.12854f, -263.954834f, -435.806427f, 126.500793f, 77.0108f, -226.753937f, -212.650085f);
            float b0 = (-139.19751f);
            bool3x3 r0 = bool3x3(false, true, true, false, false, true, true, false, false);
            TestUtils.AreEqual(a0 >= b0, r0);

            float3x3 a1 = float3x3(-413.1958f, -457.0079f, -123.012939f, 280.998047f, -112.265076f, 383.0702f, 173.831116f, -168.515747f, -286.820068f);
            float b1 = (-11.076355f);
            bool3x3 r1 = bool3x3(false, false, false, true, false, true, true, false, false);
            TestUtils.AreEqual(a1 >= b1, r1);

            float3x3 a2 = float3x3(404.740967f, 150.140442f, -264.706f, -13.230011f, -202.237823f, 64.6931152f, -182.857544f, -322.092163f, 454.143433f);
            float b2 = (59.7572632f);
            bool3x3 r2 = bool3x3(true, true, false, false, false, true, false, false, true);
            TestUtils.AreEqual(a2 >= b2, r2);

            float3x3 a3 = float3x3(-119.187012f, 393.1292f, -335.408234f, -430.910034f, 56.3127441f, -482.470825f, 261.039734f, -177.777771f, 128.379272f);
            float b3 = (-472.931427f);
            bool3x3 r3 = bool3x3(true, true, true, true, true, false, true, true, true);
            TestUtils.AreEqual(a3 >= b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_greater_equal_scalar_wide()
        {
            float a0 = (-246.073273f);
            float3x3 b0 = float3x3(142.15625f, -19.2986145f, -151.986877f, 330.020874f, -224.80011f, 451.5999f, -435.9818f, 405.881836f, -324.020142f);
            bool3x3 r0 = bool3x3(false, false, false, false, false, false, true, false, true);
            TestUtils.AreEqual(a0 >= b0, r0);

            float a1 = (300.8548f);
            float3x3 b1 = float3x3(-341.652924f, 349.348328f, -342.970947f, 397.824646f, 363.170837f, -141.004517f, -304.1397f, 317.879517f, -371.1032f);
            bool3x3 r1 = bool3x3(true, false, true, false, false, true, true, false, true);
            TestUtils.AreEqual(a1 >= b1, r1);

            float a2 = (-166.7135f);
            float3x3 b2 = float3x3(191.643372f, -274.388062f, 33.1248169f, -54.8842163f, 442.023254f, 161.054626f, -191.782715f, 158.516846f, -506.656738f);
            bool3x3 r2 = bool3x3(false, true, false, false, false, false, true, false, true);
            TestUtils.AreEqual(a2 >= b2, r2);

            float a3 = (270.833069f);
            float3x3 b3 = float3x3(-134.918579f, -57.2349548f, -439.546265f, -101.919159f, 145.802979f, -499.493225f, 447.140869f, 417.132874f, 441.340271f);
            bool3x3 r3 = bool3x3(true, true, true, true, true, true, false, false, false);
            TestUtils.AreEqual(a3 >= b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_add_wide_wide()
        {
            float3x3 a0 = float3x3(-404.27536f, -214.93515f, -164.2731f, 338.477173f, 302.848816f, -330.633f, -21.2443542f, 157.130432f, 32.4448242f);
            float3x3 b0 = float3x3(433.900269f, 359.72052f, 420.5044f, -416.3719f, -163.213684f, -35.6521f, 260.761f, -20.1174622f, 156.770142f);
            float3x3 r0 = float3x3(29.6249084f, 144.78537f, 256.2313f, -77.8947144f, 139.635132f, -366.2851f, 239.516632f, 137.01297f, 189.214966f);
            TestUtils.AreEqual(a0 + b0, r0);

            float3x3 a1 = float3x3(-333.966125f, -488.6353f, 484.605347f, -143.616638f, -246.090881f, -133.722687f, 280.921021f, -197.236908f, 72.3357544f);
            float3x3 b1 = float3x3(315.0406f, -110.87442f, -373.966431f, 12.482605f, 97.39429f, -149.583466f, -463.5646f, -332.266174f, 384.891052f);
            float3x3 r1 = float3x3(-18.9255371f, -599.509766f, 110.638916f, -131.134033f, -148.6966f, -283.306152f, -182.643585f, -529.503052f, 457.2268f);
            TestUtils.AreEqual(a1 + b1, r1);

            float3x3 a2 = float3x3(408.859131f, 362.2229f, -238.820435f, -305.657684f, 3.2989502f, -434.634155f, 50.4830322f, -353.551483f, 507.8617f);
            float3x3 b2 = float3x3(-47.640564f, 231.062012f, -383.314941f, -107.283905f, 367.018616f, 304.003784f, -509.41568f, -253.265533f, 419.9604f);
            float3x3 r2 = float3x3(361.218567f, 593.2849f, -622.1354f, -412.9416f, 370.317566f, -130.630371f, -458.932648f, -606.817f, 927.8221f);
            TestUtils.AreEqual(a2 + b2, r2);

            float3x3 a3 = float3x3(-19.4649048f, 461.294922f, -8.662842f, 154.595276f, 229.350769f, 67.8652954f, -350.4152f, -323.574768f, 83.02338f);
            float3x3 b3 = float3x3(218.59906f, -352.968719f, 335.244324f, -270.917084f, -59.56772f, -379.06842f, -200.97818f, 284.239319f, -431.9146f);
            float3x3 r3 = float3x3(199.134155f, 108.3262f, 326.581482f, -116.321808f, 169.783051f, -311.203125f, -551.3934f, -39.33545f, -348.891235f);
            TestUtils.AreEqual(a3 + b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_add_wide_scalar()
        {
            float3x3 a0 = float3x3(-323.429443f, 324.634583f, -277.883453f, -472.86264f, -459.056519f, 144.1059f, -334.474182f, 149.114319f, -388.344f);
            float b0 = (-311.2669f);
            float3x3 r0 = float3x3(-634.69635f, 13.3676758f, -589.1504f, -784.1295f, -770.3234f, -167.161011f, -645.7411f, -162.152588f, -699.6109f);
            TestUtils.AreEqual(a0 + b0, r0);

            float3x3 a1 = float3x3(303.384583f, -29.01889f, 45.1229858f, 101.801208f, -410.416f, 279.443237f, -191.047485f, 118.387756f, 11.0637817f);
            float b1 = (-7.709381f);
            float3x3 r1 = float3x3(295.6752f, -36.72827f, 37.4136047f, 94.09183f, -418.125366f, 271.733856f, -198.756866f, 110.678375f, 3.35440063f);
            TestUtils.AreEqual(a1 + b1, r1);

            float3x3 a2 = float3x3(-38.5522461f, -14.2527771f, -218.204224f, -374.088928f, -344.117737f, -368.177551f, 94.00256f, 466.70813f, 141.67926f);
            float b2 = (410.894958f);
            float3x3 r2 = float3x3(372.3427f, 396.642181f, 192.690735f, 36.80603f, 66.77722f, 42.7174072f, 504.897522f, 877.6031f, 552.5742f);
            TestUtils.AreEqual(a2 + b2, r2);

            float3x3 a3 = float3x3(-438.578247f, -230.743561f, -393.342438f, -280.737122f, 307.491333f, -471.077362f, 55.40204f, 390.843567f, 235.540955f);
            float b3 = (299.5407f);
            float3x3 r3 = float3x3(-139.037537f, 68.79715f, -93.80173f, 18.8035889f, 607.032043f, -171.536652f, 354.942749f, 690.3843f, 535.081665f);
            TestUtils.AreEqual(a3 + b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_add_scalar_wide()
        {
            float a0 = (190.831238f);
            float3x3 b0 = float3x3(411.157166f, -70.76166f, -404.5351f, 238.02887f, 442.2439f, 151.431946f, -447.093872f, -299.924774f, 477.432739f);
            float3x3 r0 = float3x3(601.9884f, 120.06958f, -213.703857f, 428.8601f, 633.075134f, 342.263184f, -256.262634f, -109.093536f, 668.264f);
            TestUtils.AreEqual(a0 + b0, r0);

            float a1 = (-292.327271f);
            float3x3 b1 = float3x3(59.3156128f, -378.93335f, -228.865875f, -309.567322f, -78.70996f, -93.9873047f, -173.508575f, 342.767578f, -172.601349f);
            float3x3 r1 = float3x3(-233.011658f, -671.2606f, -521.1931f, -601.8946f, -371.037231f, -386.314575f, -465.835846f, 50.4403076f, -464.928619f);
            TestUtils.AreEqual(a1 + b1, r1);

            float a2 = (76.3781738f);
            float3x3 b2 = float3x3(502.4878f, -262.746582f, 353.173767f, 288.0697f, 433.607117f, 397.094482f, -309.569122f, 235.586182f, -383.315f);
            float3x3 r2 = float3x3(578.865967f, -186.368408f, 429.551941f, 364.447876f, 509.9853f, 473.472656f, -233.190948f, 311.964355f, -306.936829f);
            TestUtils.AreEqual(a2 + b2, r2);

            float a3 = (81.2998657f);
            float3x3 b3 = float3x3(440.019531f, -1.446228f, 277.807373f, -488.5011f, 268.6328f, -475.54068f, 490.330139f, -476.8236f, -203.885071f);
            float3x3 r3 = float3x3(521.3194f, 79.85364f, 359.107239f, -407.201233f, 349.932678f, -394.2408f, 571.63f, -395.523743f, -122.585205f);
            TestUtils.AreEqual(a3 + b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_sub_wide_wide()
        {
            float3x3 a0 = float3x3(379.052246f, -16.164032f, 107.1604f, 30.0645752f, -428.4387f, 245.627747f, 179.604187f, 505.3778f, 317.7188f);
            float3x3 b0 = float3x3(236.683167f, 20.1707764f, 111.480408f, -484.67984f, -447.708679f, 18.19458f, -296.147644f, 367.636f, -267.455017f);
            float3x3 r0 = float3x3(142.36908f, -36.33481f, -4.32000732f, 514.7444f, 19.269989f, 227.433167f, 475.751831f, 137.741821f, 585.1738f);
            TestUtils.AreEqual(a0 - b0, r0);

            float3x3 a1 = float3x3(-198.473389f, 166.69458f, -379.0271f, 332.89624f, 159.256226f, -405.395935f, -44.4034729f, -97.96677f, 427.353271f);
            float3x3 b1 = float3x3(-71.1860657f, -248.3346f, -138.191071f, -474.848175f, -275.859375f, -172.86972f, -72.15997f, -161.5686f, 498.741577f);
            float3x3 r1 = float3x3(-127.287323f, 415.029175f, -240.836029f, 807.7444f, 435.1156f, -232.526215f, 27.7565f, 63.6018372f, -71.3883057f);
            TestUtils.AreEqual(a1 - b1, r1);

            float3x3 a2 = float3x3(64.90527f, 448.51593f, 344.09552f, -299.151367f, 465.763245f, 402.467957f, -243.425079f, 333.471619f, -150.873566f);
            float3x3 b2 = float3x3(-123.512634f, -329.4557f, -154.944733f, -481.698822f, 74.2055054f, -267.317078f, 211.440613f, 186.44928f, 471.0301f);
            float3x3 r2 = float3x3(188.417908f, 777.9716f, 499.040253f, 182.547455f, 391.557739f, 669.785034f, -454.8657f, 147.022339f, -621.9037f);
            TestUtils.AreEqual(a2 - b2, r2);

            float3x3 a3 = float3x3(-29.31659f, 103.710266f, 199.274475f, 464.224182f, 432.716064f, 108.694763f, -395.838684f, -211.500916f, -209.269287f);
            float3x3 b3 = float3x3(115.386841f, -389.972961f, 70.0085449f, -206.07605f, 256.43103f, -194.21228f, -170.827209f, -505.3638f, -70.7685242f);
            float3x3 r3 = float3x3(-144.70343f, 493.683228f, 129.26593f, 670.300232f, 176.285034f, 302.907043f, -225.011475f, 293.862885f, -138.500763f);
            TestUtils.AreEqual(a3 - b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_sub_wide_scalar()
        {
            float3x3 a0 = float3x3(102.569641f, -199.248688f, 218.154358f, 72.79639f, -139.426361f, 13.45929f, -31.2592163f, -273.2179f, -375.997253f);
            float b0 = (-504.2776f);
            float3x3 r0 = float3x3(606.8472f, 305.0289f, 722.431946f, 577.074f, 364.851227f, 517.7369f, 473.018372f, 231.0597f, 128.280334f);
            TestUtils.AreEqual(a0 - b0, r0);

            float3x3 a1 = float3x3(484.570679f, -126.182953f, -323.067322f, 128.219543f, -59.64612f, -125.91571f, -39.709137f, -388.437134f, 29.6282349f);
            float b1 = (118.86438f);
            float3x3 r1 = float3x3(365.7063f, -245.047333f, -441.9317f, 9.355164f, -178.5105f, -244.78009f, -158.573517f, -507.3015f, -89.236145f);
            TestUtils.AreEqual(a1 - b1, r1);

            float3x3 a2 = float3x3(164.511963f, -293.853027f, -168.449432f, -283.301147f, -492.369232f, 470.4295f, -384.2162f, 407.132629f, 312.913452f);
            float b2 = (-245.126526f);
            float3x3 r2 = float3x3(409.6385f, -48.7265f, 76.67709f, -38.17462f, -247.2427f, 715.556f, -139.089661f, 652.259155f, 558.04f);
            TestUtils.AreEqual(a2 - b2, r2);

            float3x3 a3 = float3x3(509.8f, -329.48877f, 253.458374f, 310.496033f, 370.29657f, -224.979126f, -336.760071f, 132.737488f, 332.288879f);
            float b3 = (150.796814f);
            float3x3 r3 = float3x3(359.003174f, -480.285583f, 102.66156f, 159.699219f, 219.499756f, -375.77594f, -487.5569f, -18.0593262f, 181.492065f);
            TestUtils.AreEqual(a3 - b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_sub_scalar_wide()
        {
            float a0 = (385.512268f);
            float3x3 b0 = float3x3(78.82605f, -43.92514f, -401.835358f, -336.146667f, 25.8710938f, 188.92981f, 132.735535f, -391.6434f, -131.123383f);
            float3x3 r0 = float3x3(306.686218f, 429.4374f, 787.347656f, 721.658936f, 359.641174f, 196.582458f, 252.776733f, 777.15564f, 516.6356f);
            TestUtils.AreEqual(a0 - b0, r0);

            float a1 = (43.8323364f);
            float3x3 b1 = float3x3(-278.0896f, -440.455048f, -375.452454f, 190.743652f, 364.129639f, 349.778564f, 492.411f, 122.080627f, -191.474121f);
            float3x3 r1 = float3x3(321.921936f, 484.287384f, 419.2848f, -146.911316f, -320.2973f, -305.946228f, -448.578674f, -78.24829f, 235.306458f);
            TestUtils.AreEqual(a1 - b1, r1);

            float a2 = (114.199036f);
            float3x3 b2 = float3x3(79.3216553f, 105.470459f, -447.612244f, -490.964935f, 245.041565f, 256.2849f, -149.756348f, -447.192841f, -468.422f);
            float3x3 r2 = float3x3(34.87738f, 8.728577f, 561.8113f, 605.16394f, -130.842529f, -142.085876f, 263.955383f, 561.391846f, 582.621033f);
            TestUtils.AreEqual(a2 - b2, r2);

            float a3 = (-312.239227f);
            float3x3 b3 = float3x3(481.437073f, -27.6018677f, 63.1561279f, -451.783752f, 364.788269f, -400.735321f, 125.037537f, -221.621948f, 252.242188f);
            float3x3 r3 = float3x3(-793.6763f, -284.63736f, -375.395355f, 139.544525f, -677.027466f, 88.49609f, -437.276764f, -90.61728f, -564.481445f);
            TestUtils.AreEqual(a3 - b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_mul_wide_wide()
        {
            float3x3 a0 = float3x3(48.7297974f, 263.5946f, -378.487183f, 494.618347f, -185.095612f, 423.893433f, 19.8618164f, -439.218475f, 200.14624f);
            float3x3 b0 = float3x3(351.026917f, 422.9179f, -490.6174f, 81.40454f, -357.226563f, 378.994568f, 318.321167f, 208.17157f, 345.885681f);
            float3x3 r0 = float3x3(17105.47f, 111478.875f, 185692.391f, 40264.18f, 66121.07f, 160653.313f, 6322.43652f, -91432.8f, 69227.72f);
            TestUtils.AreEqual(a0 * b0, r0);

            float3x3 a1 = float3x3(-178.356964f, -285.078064f, 56.74951f, 42.60443f, 472.961182f, -264.8566f, -278.0382f, 88.71771f, 171.394775f);
            float3x3 b1 = float3x3(-149.02887f, 293.0559f, 423.94812f, 53.42926f, -257.1869f, 87.37598f, 84.21008f, -59.68576f, -144.9017f);
            float3x3 r1 = float3x3(26580.3359f, -83543.81f, 24058.85f, 2276.32324f, -121639.414f, -23142.1035f, -23413.6211f, -5295.184f, -24835.3945f);
            TestUtils.AreEqual(a1 * b1, r1);

            float3x3 a2 = float3x3(366.3731f, -253.821564f, -217.548523f, 431.067322f, -159.4126f, -162.980865f, -190.602509f, 300.649963f, -264.473053f);
            float3x3 b2 = float3x3(436.8335f, -444.172668f, 292.1997f, -29.1942139f, 80.04816f, 396.248f, -81.42062f, 423.228516f, -331.0962f);
            float3x3 r2 = float3x3(160044.047f, 112740.6f, -63567.6133f, -12584.6719f, -12760.6846f, -64580.84f, 15518.9756f, 127243.641f, 87566.02f);
            TestUtils.AreEqual(a2 * b2, r2);

            float3x3 a3 = float3x3(-260.2057f, -217.722626f, -131.686554f, -451.578583f, -165.738892f, 432.811646f, -221.723145f, -365.0736f, 353.7984f);
            float3x3 b3 = float3x3(267.6739f, 351.646423f, 80.08356f, 239.805237f, 239.528442f, -172.316681f, -432.452454f, 217.683228f, 275.312744f);
            float3x3 r3 = float3x3(-69650.2656f, -76561.38f, -10545.9277f, -108290.906f, -39699.18f, -74580.6641f, 95884.72f, -79470.4f, 97405.21f);
            TestUtils.AreEqual(a3 * b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_mul_wide_scalar()
        {
            float3x3 a0 = float3x3(-387.480865f, -48.62552f, -100.415588f, -161.453522f, -428.578979f, -198.319f, 413.477356f, -216.104736f, -65.20349f);
            float b0 = (367.408752f);
            float3x3 r0 = float3x3(-142363.859f, -17865.4414f, -36893.5664f, -59319.4375f, -157463.672f, -72864.13f, 151915.2f, -79398.77f, -23956.334f);
            TestUtils.AreEqual(a0 * b0, r0);

            float3x3 a1 = float3x3(18.9765015f, -356.197571f, 13.6069336f, 394.3037f, -428.809479f, -362.6972f, 92.84253f, 344.986023f, -456.005219f);
            float b1 = (89.78735f);
            float3x3 r1 = float3x3(1703.84985f, -31982.0371f, 1221.73059f, 35403.49f, -38501.668f, -32565.623f, 8336.085f, 30975.3828f, -40943.5f);
            TestUtils.AreEqual(a1 * b1, r1);

            float3x3 a2 = float3x3(283.081482f, -398.407166f, -8.434082f, 176.073975f, -365.27417f, 236.014709f, 423.7818f, 485.64624f, -52.75711f);
            float b2 = (-209.552551f);
            float3x3 r2 = float3x3(-59320.4453f, 83487.2344f, 1767.38342f, -36896.75f, 76544.13f, -49457.4844f, -88804.5547f, -101768.406f, 11055.3867f);
            TestUtils.AreEqual(a2 * b2, r2);

            float3x3 a3 = float3x3(-217.148438f, -362.128937f, -404.337952f, -211.233734f, -70.45105f, 96.29022f, 338.633362f, 437.533264f, -282.0213f);
            float b3 = (268.026855f);
            float3x3 r3 = float3x3(-58201.6133f, -97060.28f, -108373.43f, -56616.3125f, -18882.7734f, 25808.3652f, 90762.8359f, 117270.664f, -75589.28f);
            TestUtils.AreEqual(a3 * b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_mul_scalar_wide()
        {
            float a0 = (468.915955f);
            float3x3 b0 = float3x3(123.866638f, 490.9615f, -247.1626f, -176.9495f, 382.263855f, -398.549469f, 120.569336f, -263.275879f, 74.37671f);
            float3x3 r0 = float3x3(58083.043f, 230219.672f, -115898.484f, -82974.44f, 179249.625f, -186886.2f, 56536.8867f, -123454.258f, 34876.4258f);
            TestUtils.AreEqual(a0 * b0, r0);

            float a1 = (-309.856f);
            float3x3 b1 = float3x3(404.927979f, -105.62616f, 243.92627f, -291.964081f, -92.4649353f, -144.353f, -7.56222534f, -257.847656f, -215.880646f);
            float3x3 r1 = float3x3(-125469.359f, 32728.8984f, -75582.0156f, 90466.82f, 28650.8145f, 44728.64f, 2343.20068f, 79895.64f, 66891.9141f);
            TestUtils.AreEqual(a1 * b1, r1);

            float a2 = (-480.0216f);
            float3x3 b2 = float3x3(-91.38034f, -9.730133f, 47.95282f, 6.174988f, 201.409363f, 502.8886f, 504.705566f, 286.208618f, -265.3672f);
            float3x3 r2 = float3x3(43864.54f, 4670.67432f, -23018.3887f, -2964.12744f, -96680.84f, -241397.4f, -242269.578f, -137386.328f, 127381.984f);
            TestUtils.AreEqual(a2 * b2, r2);

            float a3 = (-24.2191772f);
            float3x3 b3 = float3x3(107.506653f, 133.728577f, 410.170044f, -365.492767f, -147.518616f, 34.2779541f, -75.76126f, -127.265808f, 452.852539f);
            float3x3 r3 = float3x3(-2603.72266f, -3238.79614f, -9933.981f, 8851.935f, 3572.77954f, -830.183838f, 1834.87537f, 3082.27319f, -10967.7158f);
            TestUtils.AreEqual(a3 * b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_div_wide_wide()
        {
            float3x3 a0 = float3x3(6.82073975f, -338.630859f, 497.60437f, -491.269928f, 173.454712f, -441.556519f, 321.0169f, -41.60199f, -40.212616f);
            float3x3 b0 = float3x3(-352.736023f, 302.209717f, -489.095154f, -380.8916f, 289.646484f, -216.575256f, -289.151f, 198.978516f, -292.720581f);
            float3x3 r0 = float3x3(-0.0193366688f, -1.12051606f, -1.01739788f, 1.28978932f, 0.5988497f, 2.03881335f, -1.110205f, -0.20907779f, 0.137375429f);
            TestUtils.AreEqual(a0 / b0, r0);

            float3x3 a1 = float3x3(-169.795868f, -179.339935f, -433.401184f, -425.297119f, 335.54364f, 455.9829f, -438.431244f, -475.071625f, 398.719849f);
            float3x3 b1 = float3x3(9.058472f, -29.8904419f, 257.638977f, -340.1684f, 33.71222f, 281.611023f, -384.688171f, 457.441284f, 228.607361f);
            float3x3 r1 = float3x3(-18.7444286f, 5.999909f, -1.68220353f, 1.25025463f, 9.953176f, 1.61919415f, 1.13970554f, -1.0385412f, 1.74412513f);
            TestUtils.AreEqual(a1 / b1, r1);

            float3x3 a2 = float3x3(372.927673f, 31.9406128f, 472.518372f, -31.91278f, 381.816772f, 72.1203f, 214.974182f, 423.207275f, 165.060364f);
            float3x3 b2 = float3x3(-300.276f, -168.690582f, -59.6442871f, 320.390625f, 0.8565674f, -483.937256f, 62.5262451f, -224.534058f, -414.907623f);
            float3x3 r2 = float3x3(-1.24194968f, -0.189344376f, -7.92227364f, -0.09960585f, 445.752167f, -0.149028212f, 3.43814325f, -1.8848244f, -0.397824377f);
            TestUtils.AreEqual(a2 / b2, r2);

            float3x3 a3 = float3x3(-62.5003357f, -431.334839f, 215.506836f, -312.638855f, -324.874481f, 216.077759f, -253.5036f, -175.87088f, 338.050781f);
            float3x3 b3 = float3x3(-475.288849f, -84.26984f, 325.772766f, -12.9821472f, 403.8437f, 455.131653f, 375.575623f, 241.790649f, -251.936615f);
            float3x3 r3 = float3x3(0.1314997f, 5.11849642f, 0.661525f, 24.0822144f, -0.804456f, 0.4747588f, -0.674973547f, -0.7273684f, -1.34180892f);
            TestUtils.AreEqual(a3 / b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_div_wide_scalar()
        {
            float3x3 a0 = float3x3(-179.145264f, 46.96112f, 127.572754f, 391.679626f, 461.327637f, 150.55542f, 18.4229126f, 169.158569f, 37.5003052f);
            float b0 = (-93.36542f);
            float3x3 r0 = float3x3(1.918754f, -0.502981961f, -1.36638129f, -4.195125f, -4.94109774f, -1.61253941f, -0.197320521f, -1.81179047f, -0.4016509f);
            TestUtils.AreEqual(a0 / b0, r0);

            float3x3 a1 = float3x3(121.809082f, 398.16748f, -331.000366f, -498.451965f, 502.30603f, -329.666962f, -191.8522f, -35.94284f, -369.294861f);
            float b1 = (-22.5421448f);
            float3x3 r1 = float3x3(-5.40361547f, -17.6632481f, 14.6836233f, 22.1120033f, -22.2829742f, 14.6244717f, 8.510823f, 1.594473f, 16.38242f);
            TestUtils.AreEqual(a1 / b1, r1);

            float3x3 a2 = float3x3(-414.91745f, -20.6722717f, 102.390625f, -167.4013f, -121.169037f, -99.98184f, 392.385437f, 352.320923f, -5.702301f);
            float b2 = (94.42157f);
            float3x3 r2 = float3x3(-4.394308f, -0.2189359f, 1.08439863f, -1.77291381f, -1.283277f, -1.05888772f, 4.155676f, 3.73136067f, -0.0603919327f);
            TestUtils.AreEqual(a2 / b2, r2);

            float3x3 a3 = float3x3(-319.4804f, -323.005249f, 217.078308f, 436.197083f, 165.354614f, 441.9048f, -196.723663f, 486.582031f, 152.848267f);
            float b3 = (-370.4504f);
            float3x3 r3 = float3x3(0.8624107f, 0.8719258f, -0.5859848f, -1.17747772f, -0.446361f, -1.19288516f, 0.5310391f, -1.31348765f, -0.412601143f);
            TestUtils.AreEqual(a3 / b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_div_scalar_wide()
        {
            float a0 = (451.844666f);
            float3x3 b0 = float3x3(-95.0651855f, 207.048767f, 502.384033f, 62.0412f, -110.84549f, -332.612732f, 224.279358f, -492.734528f, 435.0329f);
            float3x3 r0 = float3x3(-4.75299835f, 2.18231034f, 0.899400949f, 7.28297758f, -4.076347f, -1.3584708f, 2.014651f, -0.9170144f, 1.03864479f);
            TestUtils.AreEqual(a0 / b0, r0);

            float a1 = (503.8188f);
            float3x3 b1 = float3x3(291.349426f, 88.02417f, 328.702759f, 50.01013f, -509.816162f, 158.94751f, 68.4343262f, -237.568573f, 32.9957275f);
            float3x3 r1 = float3x3(1.72925961f, 5.7236414f, 1.53274894f, 10.0743341f, -0.9882362f, 3.169718f, 7.362077f, -2.12073f, 15.2692127f);
            TestUtils.AreEqual(a1 / b1, r1);

            float a2 = (169.610413f);
            float3x3 b2 = float3x3(-389.980072f, -383.048676f, 42.4129028f, 3.11767578f, -432.5184f, 253.8139f, -448.56073f, 303.820679f, 385.4851f);
            float3x3 r2 = float3x3(-0.434920728f, -0.442790747f, 3.99902868f, 54.40284f, -0.3921461f, 0.6682471f, -0.3781214f, 0.5582583f, 0.43999213f);
            TestUtils.AreEqual(a2 / b2, r2);

            float a3 = (-168.352173f);
            float3x3 b3 = float3x3(-29.5488586f, -52.12848f, 325.4944f, 181.440369f, -214.250153f, -496.525543f, -270.410767f, 480.0288f, 459.5122f);
            float3x3 r3 = float3x3(5.69741726f, 3.22956228f, -0.5172199f, -0.927865f, 0.7857739f, 0.339060456f, 0.6225794f, -0.350712657f, -0.366371483f);
            TestUtils.AreEqual(a3 / b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_mod_wide_wide()
        {
            float3x3 a0 = float3x3(157.5586f, 504.938f, 73.00708f, -387.6087f, 278.5445f, 282.228149f, 57.0862427f, -63.974762f, -345.268982f);
            float3x3 b0 = float3x3(180.250183f, -41.4798279f, -308.673157f, -326.860046f, 411.588257f, 429.410583f, 471.1482f, 226.144348f, 423.907471f);
            float3x3 r0 = float3x3(157.5586f, 7.18005371f, 73.00708f, -60.7486572f, 278.5445f, 282.228149f, 57.0862427f, -63.974762f, -345.268982f);
            TestUtils.AreEqual(a0 % b0, r0);

            float3x3 a1 = float3x3(-380.7162f, 470.2804f, -480.307465f, 65.2514648f, 503.1162f, 387.605835f, -281.181274f, 89.57654f, -216.285217f);
            float3x3 b1 = float3x3(-300.951752f, 67.24133f, -488.690979f, -440.438141f, 508.5224f, -108.2384f, 93.46802f, -20.98877f, 301.875427f);
            float3x3 r1 = float3x3(-79.7644348f, 66.8324f, -480.307465f, 65.2514648f, 503.1162f, 62.890625f, -0.7772217f, 5.62146f, -216.285217f);
            TestUtils.AreEqual(a1 % b1, r1);

            float3x3 a2 = float3x3(95.61566f, 327.346619f, -362.112946f, 124.853882f, 461.3974f, 352.7256f, -454.7909f, -366.852783f, -175.171173f);
            float3x3 b2 = float3x3(142.5885f, 439.710449f, 61.1275635f, -37.5414734f, -345.72113f, -253.643555f, -271.911163f, -2.026184f, 320.0362f);
            float3x3 r2 = float3x3(95.61566f, 327.346619f, -56.47513f, 12.2294617f, 115.67627f, 99.08203f, -182.87973f, -0.113464355f, -175.171173f);
            TestUtils.AreEqual(a2 % b2, r2);

            float3x3 a3 = float3x3(504.993347f, 148.557617f, 405.268738f, -299.789368f, -202.465912f, 180.769531f, -172.165924f, 175.433411f, -381.471283f);
            float3x3 b3 = float3x3(-421.68277f, 481.628967f, 1.44519043f, -384.131134f, -125.2171f, -323.2398f, -433.925018f, 146.149841f, 24.1425171f);
            float3x3 r3 = float3x3(83.31058f, 148.557617f, 0.6154175f, -299.789368f, -77.24881f, 180.769531f, -172.165924f, 29.28357f, -19.3335266f);
            TestUtils.AreEqual(a3 % b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_mod_wide_scalar()
        {
            float3x3 a0 = float3x3(42.07245f, 313.0503f, 111.52063f, 131.212036f, -460.440857f, -436.485046f, -221.73172f, -316.3909f, 24.1831055f);
            float b0 = (260.272583f);
            float3x3 r0 = float3x3(42.07245f, 52.77771f, 111.52063f, 131.212036f, -200.168274f, -176.212463f, -221.73172f, -56.1183167f, 24.1831055f);
            TestUtils.AreEqual(a0 % b0, r0);

            float3x3 a1 = float3x3(-238.9426f, -240.832489f, -12.3947144f, -152.489655f, -387.4286f, -240.0715f, -51.5551453f, 179.872742f, 15.7027588f);
            float b1 = (335.600952f);
            float3x3 r1 = float3x3(-238.9426f, -240.832489f, -12.3947144f, -152.489655f, -51.8276367f, -240.0715f, -51.5551453f, 179.872742f, 15.7027588f);
            TestUtils.AreEqual(a1 % b1, r1);

            float3x3 a2 = float3x3(179.9151f, -76.82529f, 213.75293f, 143.580566f, 490.95636f, 426.8548f, -495.03064f, -452.600067f, -235.307281f);
            float b2 = (453.635f);
            float3x3 r2 = float3x3(179.9151f, -76.82529f, 213.75293f, 143.580566f, 37.32135f, 426.8548f, -41.39563f, -452.600067f, -235.307281f);
            TestUtils.AreEqual(a2 % b2, r2);

            float3x3 a3 = float3x3(-457.423737f, 46.65277f, 268.335815f, 463.731384f, 90.74432f, -293.5371f, -227.900635f, 349.627441f, 342.578735f);
            float b3 = (320.532471f);
            float3x3 r3 = float3x3(-136.891266f, 46.65277f, 268.335815f, 143.198914f, 90.74432f, -293.5371f, -227.900635f, 29.09497f, 22.0462646f);
            TestUtils.AreEqual(a3 % b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_mod_scalar_wide()
        {
            float a0 = (-162.9458f);
            float3x3 b0 = float3x3(171.125732f, 159.207947f, 491.348083f, -136.5397f, 84.48755f, 414.3911f, -85.03061f, 161.989563f, -7.60800171f);
            float3x3 r0 = float3x3(-162.9458f, -3.737854f, -162.9458f, -26.4060974f, -78.45825f, -162.9458f, -77.91519f, -0.9562378f, -3.177765f);
            TestUtils.AreEqual(a0 % b0, r0);

            float a1 = (-85.22388f);
            float3x3 b1 = float3x3(160.841248f, -234.483124f, 114.877625f, -40.5487061f, -85.7437439f, -235.708923f, -135.851166f, 391.487f, 240.695984f);
            float3x3 r1 = float3x3(-85.22388f, -85.22388f, -85.22388f, -4.126465f, -85.22388f, -85.22388f, -85.22388f, -85.22388f, -85.22388f);
            TestUtils.AreEqual(a1 % b1, r1);

            float a2 = (-81.43179f);
            float3x3 b2 = float3x3(-398.1865f, -209.346069f, -431.59314f, 411.7469f, -119.326263f, -296.96582f, -319.028f, 194.759827f, -189.406708f);
            float3x3 r2 = float3x3(-81.43179f, -81.43179f, -81.43179f, -81.43179f, -81.43179f, -81.43179f, -81.43179f, -81.43179f, -81.43179f);
            TestUtils.AreEqual(a2 % b2, r2);

            float a3 = (-292.210022f);
            float3x3 b3 = float3x3(-228.648621f, 306.944519f, 313.818237f, 224.436829f, 426.099548f, -14.8559875f, -477.121582f, 248.822388f, -186.535858f);
            float3x3 r3 = float3x3(-63.5614f, -292.210022f, -292.210022f, -67.77319f, -292.210022f, -9.946259f, -292.210022f, -43.3876343f, -105.674164f);
            TestUtils.AreEqual(a3 % b3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_plus()
        {
            float3x3 a0 = float3x3(150.599854f, -137.8551f, 439.0912f, 401.849243f, 401.823547f, -299.614624f, -364.624817f, 444.5669f, -135.177917f);
            float3x3 r0 = float3x3(150.599854f, -137.8551f, 439.0912f, 401.849243f, 401.823547f, -299.614624f, -364.624817f, 444.5669f, -135.177917f);
            TestUtils.AreEqual(+a0, r0);

            float3x3 a1 = float3x3(188.590271f, -176.78833f, 67.19397f, -202.573944f, -83.5177f, 466.917053f, 369.197021f, 453.9458f, 288.732178f);
            float3x3 r1 = float3x3(188.590271f, -176.78833f, 67.19397f, -202.573944f, -83.5177f, 466.917053f, 369.197021f, 453.9458f, 288.732178f);
            TestUtils.AreEqual(+a1, r1);

            float3x3 a2 = float3x3(27.9801025f, -419.9559f, -418.334534f, -85.52872f, 184.964111f, -113.681641f, -496.363739f, 473.138367f, -214.060791f);
            float3x3 r2 = float3x3(27.9801025f, -419.9559f, -418.334534f, -85.52872f, 184.964111f, -113.681641f, -496.363739f, 473.138367f, -214.060791f);
            TestUtils.AreEqual(+a2, r2);

            float3x3 a3 = float3x3(-316.094727f, -259.0204f, 504.885f, 195.073181f, 279.805542f, 368.666138f, 88.02533f, -123.764893f, 378.997f);
            float3x3 r3 = float3x3(-316.094727f, -259.0204f, 504.885f, 195.073181f, 279.805542f, 368.666138f, 88.02533f, -123.764893f, 378.997f);
            TestUtils.AreEqual(+a3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_neg()
        {
            float3x3 a0 = float3x3(-169.281158f, -377.0252f, 36.6141357f, -258.382446f, 469.914551f, 388.945984f, 350.969238f, 176.102539f, 494.421631f);
            float3x3 r0 = float3x3(169.281158f, 377.0252f, -36.6141357f, 258.382446f, -469.914551f, -388.945984f, -350.969238f, -176.102539f, -494.421631f);
            TestUtils.AreEqual(-a0, r0);

            float3x3 a1 = float3x3(201.18689f, 313.8802f, 381.035767f, 327.1795f, 292.367554f, 462.13623f, 448.669861f, 339.456848f, 93.50537f);
            float3x3 r1 = float3x3(-201.18689f, -313.8802f, -381.035767f, -327.1795f, -292.367554f, -462.13623f, -448.669861f, -339.456848f, -93.50537f);
            TestUtils.AreEqual(-a1, r1);

            float3x3 a2 = float3x3(385.7409f, -298.235046f, -14.9801636f, -116.370148f, 258.546448f, 369.4939f, 292.990967f, -349.357544f, 160.560852f);
            float3x3 r2 = float3x3(-385.7409f, 298.235046f, 14.9801636f, 116.370148f, -258.546448f, -369.4939f, -292.990967f, 349.357544f, -160.560852f);
            TestUtils.AreEqual(-a2, r2);

            float3x3 a3 = float3x3(-429.3812f, -12.6661682f, -273.521271f, -138.772888f, 97.6513062f, 94.23346f, 184.8446f, -136.302673f, 31.7103882f);
            float3x3 r3 = float3x3(429.3812f, 12.6661682f, 273.521271f, 138.772888f, -97.6513062f, -94.23346f, -184.8446f, 136.302673f, -31.7103882f);
            TestUtils.AreEqual(-a3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_prefix_inc()
        {
            float3x3 a0 = float3x3(86.58539f, 161.589783f, 443.929626f, -338.268433f, -34.5586548f, -368.567474f, 359.1416f, 145.026123f, 157.233154f);
            float3x3 r0 = float3x3(87.58539f, 162.589783f, 444.929626f, -337.268433f, -33.5586548f, -367.567474f, 360.1416f, 146.026123f, 158.233154f);
            TestUtils.AreEqual(++a0, r0);

            float3x3 a1 = float3x3(25.3619385f, 346.040466f, 381.775635f, 244.663025f, 49.9732056f, -105.417908f, 218.376526f, 166.647827f, -153.756561f);
            float3x3 r1 = float3x3(26.3619385f, 347.040466f, 382.775635f, 245.663025f, 50.9732056f, -104.417908f, 219.376526f, 167.647827f, -152.756561f);
            TestUtils.AreEqual(++a1, r1);

            float3x3 a2 = float3x3(352.001953f, -18.34317f, -484.351f, 49.86487f, -269.916f, -205.470337f, 375.4276f, -157.748962f, -218.1582f);
            float3x3 r2 = float3x3(353.001953f, -17.34317f, -483.351f, 50.86487f, -268.916f, -204.470337f, 376.4276f, -156.748962f, -217.1582f);
            TestUtils.AreEqual(++a2, r2);

            float3x3 a3 = float3x3(-343.9989f, 312.928345f, -29.0180664f, -309.897827f, -6.816864f, 73.2099f, -186.3169f, -126.7576f, 176.922119f);
            float3x3 r3 = float3x3(-342.9989f, 313.928345f, -28.0180664f, -308.897827f, -5.816864f, 74.2099f, -185.3169f, -125.7576f, 177.922119f);
            TestUtils.AreEqual(++a3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_postfix_inc()
        {
            float3x3 a0 = float3x3(-281.7821f, 215.342224f, 120.820862f, -325.353668f, -179.722931f, 44.56366f, -375.17334f, 193.365723f, 329.5243f);
            float3x3 r0 = float3x3(-281.7821f, 215.342224f, 120.820862f, -325.353668f, -179.722931f, 44.56366f, -375.17334f, 193.365723f, 329.5243f);
            TestUtils.AreEqual(a0++, r0);

            float3x3 a1 = float3x3(-341.1537f, 277.307373f, -15.2096863f, -362.9092f, 480.75708f, 20.4838257f, -132.573273f, -43.3430176f, 63.9730225f);
            float3x3 r1 = float3x3(-341.1537f, 277.307373f, -15.2096863f, -362.9092f, 480.75708f, 20.4838257f, -132.573273f, -43.3430176f, 63.9730225f);
            TestUtils.AreEqual(a1++, r1);

            float3x3 a2 = float3x3(423.3778f, -39.5121155f, 121.25531f, -293.2835f, -121.773895f, 337.215637f, 64.4483643f, -319.071655f, 342.496338f);
            float3x3 r2 = float3x3(423.3778f, -39.5121155f, 121.25531f, -293.2835f, -121.773895f, 337.215637f, 64.4483643f, -319.071655f, 342.496338f);
            TestUtils.AreEqual(a2++, r2);

            float3x3 a3 = float3x3(357.928772f, 71.8752441f, 176.151672f, -239.430359f, 7.44989f, 427.487f, 348.652466f, 285.957275f, -299.5846f);
            float3x3 r3 = float3x3(357.928772f, 71.8752441f, 176.151672f, -239.430359f, 7.44989f, 427.487f, 348.652466f, 285.957275f, -299.5846f);
            TestUtils.AreEqual(a3++, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_prefix_dec()
        {
            float3x3 a0 = float3x3(340.001831f, 496.070862f, 288.384216f, 183.694641f, -353.6148f, 398.281921f, -240.591583f, 15.32019f, 276.588684f);
            float3x3 r0 = float3x3(339.001831f, 495.070862f, 287.384216f, 182.694641f, -354.6148f, 397.281921f, -241.591583f, 14.32019f, 275.588684f);
            TestUtils.AreEqual(--a0, r0);

            float3x3 a1 = float3x3(311.914368f, -268.388153f, 349.170227f, 468.03656f, -93.05707f, 429.558044f, -164.938538f, 278.540283f, -142.655212f);
            float3x3 r1 = float3x3(310.914368f, -269.388153f, 348.170227f, 467.03656f, -94.05707f, 428.558044f, -165.938538f, 277.540283f, -143.655212f);
            TestUtils.AreEqual(--a1, r1);

            float3x3 a2 = float3x3(96.54895f, -2.399109f, 225.875671f, -388.630585f, -455.2949f, -248.5845f, 384.1317f, 80.48389f, 240.107849f);
            float3x3 r2 = float3x3(95.54895f, -3.399109f, 224.875671f, -389.630585f, -456.2949f, -249.5845f, 383.1317f, 79.48389f, 239.107849f);
            TestUtils.AreEqual(--a2, r2);

            float3x3 a3 = float3x3(-385.305054f, -497.545959f, -71.49823f, -383.514832f, 4.63079834f, 270.4037f, -287.671753f, -447.269775f, -168.875916f);
            float3x3 r3 = float3x3(-386.305054f, -498.545959f, -72.49823f, -384.514832f, 3.63079834f, 269.4037f, -288.671753f, -448.269775f, -169.875916f);
            TestUtils.AreEqual(--a3, r3);
        }

        [TestCompiler]
        public static void float3x3_operator_postfix_dec()
        {
            float3x3 a0 = float3x3(-148.111755f, 252.8498f, -106.1579f, 132.648621f, -370.723755f, 343.311157f, -321.157837f, 450.6018f, 330.9572f);
            float3x3 r0 = float3x3(-148.111755f, 252.8498f, -106.1579f, 132.648621f, -370.723755f, 343.311157f, -321.157837f, 450.6018f, 330.9572f);
            TestUtils.AreEqual(a0--, r0);

            float3x3 a1 = float3x3(425.6258f, -164.309845f, 234.149658f, -320.725952f, -337.031372f, -310.267639f, -298.127167f, 453.00238f, -453.877f);
            float3x3 r1 = float3x3(425.6258f, -164.309845f, 234.149658f, -320.725952f, -337.031372f, -310.267639f, -298.127167f, 453.00238f, -453.877f);
            TestUtils.AreEqual(a1--, r1);

            float3x3 a2 = float3x3(-134.770233f, 511.618652f, -239.314911f, -492.061157f, 475.658264f, 56.15918f, 24.9328f, -92.12152f, 247.940613f);
            float3x3 r2 = float3x3(-134.770233f, 511.618652f, -239.314911f, -492.061157f, 475.658264f, 56.15918f, 24.9328f, -92.12152f, 247.940613f);
            TestUtils.AreEqual(a2--, r2);

            float3x3 a3 = float3x3(-467.1975f, 294.711548f, 47.24408f, -130.603f, -335.9472f, 63.55182f, 41.2713623f, 228.408875f, 427.093628f);
            float3x3 r3 = float3x3(-467.1975f, 294.711548f, 47.24408f, -130.603f, -335.9472f, 63.55182f, 41.2713623f, 228.408875f, 427.093628f);
            TestUtils.AreEqual(a3--, r3);
        }


    }
}
