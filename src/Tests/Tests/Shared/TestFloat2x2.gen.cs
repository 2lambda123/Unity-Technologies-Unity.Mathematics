//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using NUnit.Framework;
using static Unity.Mathematics.math;
using Burst.Compiler.IL.Tests;

namespace Unity.Mathematics.Tests
{
    [TestFixture]
    public class TestFloat2x2
    {
        [TestCompiler]
        public static void float2x2_zero()
        {
            TestUtils.AreEqual(float2x2.zero.c0.x, 0.0f);
            TestUtils.AreEqual(float2x2.zero.c0.y, 0.0f);
            TestUtils.AreEqual(float2x2.zero.c1.x, 0.0f);
            TestUtils.AreEqual(float2x2.zero.c1.y, 0.0f);
        }

        [TestCompiler]
        public static void float2x2_identity()
        {
            TestUtils.AreEqual(float2x2.identity.c0.x, 1.0f);
            TestUtils.AreEqual(float2x2.identity.c0.y, 0.0f);
            TestUtils.AreEqual(float2x2.identity.c1.x, 0.0f);
            TestUtils.AreEqual(float2x2.identity.c1.y, 1.0f);
        }

        [TestCompiler]
        public static void float2x2_operator_equal_wide_wide()
        {
            float2x2 a0 = float2x2(331.744141f, -417.6833f, -438.450867f, -57.99066f);
            float2x2 b0 = float2x2(-426.582825f, 431.344543f, 263.339172f, -309.3919f);
            bool2x2 r0 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            float2x2 a1 = float2x2(-183.1134f, 72.3228149f, -292.706116f, -181.376923f);
            float2x2 b1 = float2x2(391.1996f, -468.237274f, -389.9116f, -192.672028f);
            bool2x2 r1 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            float2x2 a2 = float2x2(43.84778f, 481.287354f, 258.4253f, 352.580444f);
            float2x2 b2 = float2x2(-8.950195f, -339.086975f, 104.677917f, -443.5048f);
            bool2x2 r2 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            float2x2 a3 = float2x2(70.85327f, -41.08313f, -501.143951f, 469.417725f);
            float2x2 b3 = float2x2(358.640137f, -415.7492f, -141.969635f, 379.130066f);
            bool2x2 r3 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_equal_wide_scalar()
        {
            float2x2 a0 = float2x2(327.101929f, 440.467224f, -443.745178f, 325.546265f);
            float b0 = (342.440552f);
            bool2x2 r0 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            float2x2 a1 = float2x2(435.371765f, -398.435f, 377.0666f, 445.502136f);
            float b1 = (58.38208f);
            bool2x2 r1 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            float2x2 a2 = float2x2(-17.7927246f, -350.2315f, 450.236755f, 14.9833374f);
            float b2 = (-92.37259f);
            bool2x2 r2 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            float2x2 a3 = float2x2(-504.426971f, 454.7033f, 289.2917f, 356.93158f);
            float b3 = (412.488525f);
            bool2x2 r3 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_equal_scalar_wide()
        {
            float a0 = (430.781128f);
            float2x2 b0 = float2x2(-434.727478f, 103.730347f, -263.03656f, -224.560181f);
            bool2x2 r0 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a0 == b0, r0);

            float a1 = (204.110779f);
            float2x2 b1 = float2x2(196.568237f, -424.756561f, 467.4505f, -45.4336243f);
            bool2x2 r1 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a1 == b1, r1);

            float a2 = (138.191589f);
            float2x2 b2 = float2x2(181.061951f, -449.2158f, -335.154449f, -77.46622f);
            bool2x2 r2 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a2 == b2, r2);

            float a3 = (107.902405f);
            float2x2 b3 = float2x2(-330.9517f, -115.29895f, 244.522888f, -481.4762f);
            bool2x2 r3 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a3 == b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_not_equal_wide_wide()
        {
            float2x2 a0 = float2x2(19.2539673f, 121.335449f, 468.3097f, -212.365448f);
            float2x2 b0 = float2x2(-249.066345f, -19.0466f, 323.622559f, 294.941956f);
            bool2x2 r0 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            float2x2 a1 = float2x2(-410.633484f, 507.534241f, 52.20117f, -319.6424f);
            float2x2 b1 = float2x2(-492.460968f, -166.483276f, 421.1953f, 87.6629f);
            bool2x2 r1 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            float2x2 a2 = float2x2(-448.9063f, 255.3703f, -70.46268f, -18.9137878f);
            float2x2 b2 = float2x2(193.875122f, -279.289825f, 158.513611f, 426.635132f);
            bool2x2 r2 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            float2x2 a3 = float2x2(-131.624084f, 288.074951f, 290.717957f, 191.2832f);
            float2x2 b3 = float2x2(-404.547821f, 480.740479f, -184.480316f, 355.445068f);
            bool2x2 r3 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_not_equal_wide_scalar()
        {
            float2x2 a0 = float2x2(-418.022278f, 231.448242f, -469.478516f, -94.97409f);
            float b0 = (-206.336578f);
            bool2x2 r0 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            float2x2 a1 = float2x2(-376.084381f, 492.9278f, -91.33383f, 80.41858f);
            float b1 = (-428.119019f);
            bool2x2 r1 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            float2x2 a2 = float2x2(-124.39093f, 353.96106f, 170.989319f, -494.895752f);
            float b2 = (-409.290527f);
            bool2x2 r2 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            float2x2 a3 = float2x2(181.015137f, 324.904724f, 365.89978f, 86.04675f);
            float b3 = (-180.176971f);
            bool2x2 r3 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_not_equal_scalar_wide()
        {
            float a0 = (357.343384f);
            float2x2 b0 = float2x2(192.976379f, -323.1933f, -25.1252441f, -270.503082f);
            bool2x2 r0 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a0 != b0, r0);

            float a1 = (-454.426819f);
            float2x2 b1 = float2x2(-458.8189f, -274.5384f, 127.642212f, -43.8877258f);
            bool2x2 r1 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a1 != b1, r1);

            float a2 = (-179.47229f);
            float2x2 b2 = float2x2(498.287659f, -333.8144f, -169.487946f, -146.258789f);
            bool2x2 r2 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a2 != b2, r2);

            float a3 = (-33.028656f);
            float2x2 b3 = float2x2(156.743591f, -285.206543f, -10.882843f, 259.283447f);
            bool2x2 r3 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a3 != b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_less_wide_wide()
        {
            float2x2 a0 = float2x2(487.8249f, -508.921722f, 53.8760376f, 443.786926f);
            float2x2 b0 = float2x2(453.097351f, -123.830566f, 492.750122f, 434.46344f);
            bool2x2 r0 = bool2x2(false, true, true, false);
            TestUtils.AreEqual(a0 < b0, r0);

            float2x2 a1 = float2x2(-81.07861f, 103.165527f, -496.199768f, 30.0013428f);
            float2x2 b1 = float2x2(-402.464783f, -480.752319f, 317.300659f, 175.821045f);
            bool2x2 r1 = bool2x2(false, false, true, true);
            TestUtils.AreEqual(a1 < b1, r1);

            float2x2 a2 = float2x2(490.884521f, 485.697083f, -360.631073f, -442.654358f);
            float2x2 b2 = float2x2(301.866333f, 77.77667f, -188.57605f, 479.3379f);
            bool2x2 r2 = bool2x2(false, false, true, true);
            TestUtils.AreEqual(a2 < b2, r2);

            float2x2 a3 = float2x2(-310.858032f, -142.116028f, -131.921722f, -279.917725f);
            float2x2 b3 = float2x2(-393.342255f, 21.69635f, 151.5708f, -115.47818f);
            bool2x2 r3 = bool2x2(false, true, true, true);
            TestUtils.AreEqual(a3 < b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_less_wide_scalar()
        {
            float2x2 a0 = float2x2(18.1535645f, -409.346466f, 180.7865f, -185.154968f);
            float b0 = (152.320862f);
            bool2x2 r0 = bool2x2(true, true, false, true);
            TestUtils.AreEqual(a0 < b0, r0);

            float2x2 a1 = float2x2(228.264709f, 265.743835f, -307.545563f, 493.123169f);
            float b1 = (124.125732f);
            bool2x2 r1 = bool2x2(false, false, true, false);
            TestUtils.AreEqual(a1 < b1, r1);

            float2x2 a2 = float2x2(36.3736572f, 85.93457f, -89.3711853f, -36.8948059f);
            float b2 = (131.67981f);
            bool2x2 r2 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a2 < b2, r2);

            float2x2 a3 = float2x2(-491.257172f, -320.661f, 424.3283f, -392.517334f);
            float b3 = (-193.741882f);
            bool2x2 r3 = bool2x2(true, true, false, true);
            TestUtils.AreEqual(a3 < b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_less_scalar_wide()
        {
            float a0 = (416.681274f);
            float2x2 b0 = float2x2(-105.389069f, -389.2496f, 408.846863f, -87.03952f);
            bool2x2 r0 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a0 < b0, r0);

            float a1 = (268.691345f);
            float2x2 b1 = float2x2(-470.20163f, 271.315674f, -170.322723f, -156.598419f);
            bool2x2 r1 = bool2x2(false, true, false, false);
            TestUtils.AreEqual(a1 < b1, r1);

            float a2 = (-0.2886963f);
            float2x2 b2 = float2x2(72.09082f, -54.4299927f, 191.603271f, 370.544f);
            bool2x2 r2 = bool2x2(true, false, true, true);
            TestUtils.AreEqual(a2 < b2, r2);

            float a3 = (283.232422f);
            float2x2 b3 = float2x2(-362.762024f, -145.500977f, 315.129883f, 340.8296f);
            bool2x2 r3 = bool2x2(false, false, true, true);
            TestUtils.AreEqual(a3 < b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_greater_wide_wide()
        {
            float2x2 a0 = float2x2(-188.03302f, 234.300232f, -56.30594f, 240.958374f);
            float2x2 b0 = float2x2(-17.4008179f, -59.53961f, -24.2853088f, 222.387512f);
            bool2x2 r0 = bool2x2(false, true, false, true);
            TestUtils.AreEqual(a0 > b0, r0);

            float2x2 a1 = float2x2(501.4876f, -303.425f, -305.5091f, -470.742554f);
            float2x2 b1 = float2x2(-207.170441f, 365.5465f, 183.5733f, -23.080719f);
            bool2x2 r1 = bool2x2(true, false, false, false);
            TestUtils.AreEqual(a1 > b1, r1);

            float2x2 a2 = float2x2(-305.090759f, 26.0454712f, 169.997375f, -498.388031f);
            float2x2 b2 = float2x2(337.163818f, 175.811768f, -8.514038f, -125.865387f);
            bool2x2 r2 = bool2x2(false, false, true, false);
            TestUtils.AreEqual(a2 > b2, r2);

            float2x2 a3 = float2x2(270.142944f, 69.6588745f, -163.975159f, 273.174133f);
            float2x2 b3 = float2x2(-212.857056f, 12.6571045f, 134.17511f, -101.511993f);
            bool2x2 r3 = bool2x2(true, true, false, true);
            TestUtils.AreEqual(a3 > b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_greater_wide_scalar()
        {
            float2x2 a0 = float2x2(468.8808f, -355.421021f, -45.708252f, 407.176575f);
            float b0 = (201.802734f);
            bool2x2 r0 = bool2x2(true, false, false, true);
            TestUtils.AreEqual(a0 > b0, r0);

            float2x2 a1 = float2x2(348.72522f, -422.750183f, -364.2755f, 434.163635f);
            float b1 = (418.545349f);
            bool2x2 r1 = bool2x2(false, false, false, true);
            TestUtils.AreEqual(a1 > b1, r1);

            float2x2 a2 = float2x2(-255.049072f, 379.823364f, -346.942383f, -121.102142f);
            float b2 = (178.8064f);
            bool2x2 r2 = bool2x2(false, true, false, false);
            TestUtils.AreEqual(a2 > b2, r2);

            float2x2 a3 = float2x2(164.48761f, 437.083984f, 15.6209717f, 208.428467f);
            float b3 = (-282.735718f);
            bool2x2 r3 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a3 > b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_greater_scalar_wide()
        {
            float a0 = (137.504211f);
            float2x2 b0 = float2x2(-443.866821f, 279.852783f, -462.4043f, -280.713776f);
            bool2x2 r0 = bool2x2(true, false, true, true);
            TestUtils.AreEqual(a0 > b0, r0);

            float a1 = (120.712769f);
            float2x2 b1 = float2x2(-31.6700134f, 363.428345f, 263.125427f, -156.36087f);
            bool2x2 r1 = bool2x2(true, false, false, true);
            TestUtils.AreEqual(a1 > b1, r1);

            float a2 = (66.3540039f);
            float2x2 b2 = float2x2(-303.1296f, 419.3374f, -392.721069f, -378.762939f);
            bool2x2 r2 = bool2x2(true, false, true, true);
            TestUtils.AreEqual(a2 > b2, r2);

            float a3 = (-398.361145f);
            float2x2 b3 = float2x2(-314.282471f, 89.5307f, 408.407166f, 303.3543f);
            bool2x2 r3 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a3 > b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_less_equal_wide_wide()
        {
            float2x2 a0 = float2x2(333.0476f, 239.35083f, 26.5692139f, 41.4924927f);
            float2x2 b0 = float2x2(46.1311646f, -378.082336f, -466.7782f, -173.335022f);
            bool2x2 r0 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a0 <= b0, r0);

            float2x2 a1 = float2x2(-162.662354f, -271.002747f, -108.986206f, 392.0816f);
            float2x2 b1 = float2x2(-482.2393f, 183.3465f, 399.076172f, -127.637085f);
            bool2x2 r1 = bool2x2(false, true, true, false);
            TestUtils.AreEqual(a1 <= b1, r1);

            float2x2 a2 = float2x2(314.488647f, 208.102173f, 39.9359741f, 458.7705f);
            float2x2 b2 = float2x2(-118.196838f, -329.727448f, -208.817627f, 368.286865f);
            bool2x2 r2 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a2 <= b2, r2);

            float2x2 a3 = float2x2(-404.075f, 359.389954f, 405.929749f, -463.0184f);
            float2x2 b3 = float2x2(68.84564f, 452.365234f, -255.050629f, 440.1126f);
            bool2x2 r3 = bool2x2(true, true, false, true);
            TestUtils.AreEqual(a3 <= b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_less_equal_wide_scalar()
        {
            float2x2 a0 = float2x2(122.817688f, -283.694275f, -288.847656f, -185.453918f);
            float b0 = (-181.943909f);
            bool2x2 r0 = bool2x2(false, true, true, true);
            TestUtils.AreEqual(a0 <= b0, r0);

            float2x2 a1 = float2x2(-315.2539f, -317.959167f, -255.5698f, -368.803284f);
            float b1 = (279.5738f);
            bool2x2 r1 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a1 <= b1, r1);

            float2x2 a2 = float2x2(-132.488861f, -328.492218f, -115.355896f, -192.5214f);
            float b2 = (-207.253967f);
            bool2x2 r2 = bool2x2(false, true, false, false);
            TestUtils.AreEqual(a2 <= b2, r2);

            float2x2 a3 = float2x2(454.183838f, 509.92865f, -410.584534f, -231.749481f);
            float b3 = (-38.063385f);
            bool2x2 r3 = bool2x2(false, false, true, true);
            TestUtils.AreEqual(a3 <= b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_less_equal_scalar_wide()
        {
            float a0 = (-336.4657f);
            float2x2 b0 = float2x2(251.958374f, -22.8583069f, -238.905853f, 284.666626f);
            bool2x2 r0 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a0 <= b0, r0);

            float a1 = (-358.324f);
            float2x2 b1 = float2x2(468.530273f, -439.037231f, -197.067688f, -367.59552f);
            bool2x2 r1 = bool2x2(true, false, true, false);
            TestUtils.AreEqual(a1 <= b1, r1);

            float a2 = (-143.895081f);
            float2x2 b2 = float2x2(-387.8427f, -88.23752f, 439.360535f, -487.9847f);
            bool2x2 r2 = bool2x2(false, true, true, false);
            TestUtils.AreEqual(a2 <= b2, r2);

            float a3 = (-393.415863f);
            float2x2 b3 = float2x2(399.102478f, 365.36438f, -225.015259f, -305.5796f);
            bool2x2 r3 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a3 <= b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_greater_equal_wide_wide()
        {
            float2x2 a0 = float2x2(143.641235f, -251.704163f, 118.576172f, 23.871582f);
            float2x2 b0 = float2x2(-409.271027f, -84.91385f, 509.1283f, -61.13452f);
            bool2x2 r0 = bool2x2(true, false, false, true);
            TestUtils.AreEqual(a0 >= b0, r0);

            float2x2 a1 = float2x2(84.63403f, -145.382233f, -234.447327f, 90.46185f);
            float2x2 b1 = float2x2(139.217224f, -30.2294312f, 210.736267f, 27.0149536f);
            bool2x2 r1 = bool2x2(false, false, false, true);
            TestUtils.AreEqual(a1 >= b1, r1);

            float2x2 a2 = float2x2(203.555847f, 370.9796f, -64.08972f, -140.503021f);
            float2x2 b2 = float2x2(467.682922f, -206.05484f, 109.552368f, -413.970337f);
            bool2x2 r2 = bool2x2(false, true, false, true);
            TestUtils.AreEqual(a2 >= b2, r2);

            float2x2 a3 = float2x2(-61.64731f, 463.918945f, -81.43878f, -56.36319f);
            float2x2 b3 = float2x2(95.38501f, -493.097656f, 330.596924f, 106.934875f);
            bool2x2 r3 = bool2x2(false, true, false, false);
            TestUtils.AreEqual(a3 >= b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_greater_equal_wide_scalar()
        {
            float2x2 a0 = float2x2(-355.36084f, 304.301453f, 385.12854f, -263.954834f);
            float b0 = (-139.19751f);
            bool2x2 r0 = bool2x2(false, true, true, false);
            TestUtils.AreEqual(a0 >= b0, r0);

            float2x2 a1 = float2x2(-435.806427f, 77.0108f, -226.753937f, -212.650085f);
            float b1 = (126.500793f);
            bool2x2 r1 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a1 >= b1, r1);

            float2x2 a2 = float2x2(-413.1958f, -457.0079f, -123.012939f, 280.998047f);
            float b2 = (-11.076355f);
            bool2x2 r2 = bool2x2(false, false, false, true);
            TestUtils.AreEqual(a2 >= b2, r2);

            float2x2 a3 = float2x2(-112.265076f, 173.831116f, -168.515747f, -286.820068f);
            float b3 = (383.0702f);
            bool2x2 r3 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a3 >= b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_greater_equal_scalar_wide()
        {
            float a0 = (-246.073273f);
            float2x2 b0 = float2x2(142.15625f, -19.2986145f, -151.986877f, 330.020874f);
            bool2x2 r0 = bool2x2(false, false, false, false);
            TestUtils.AreEqual(a0 >= b0, r0);

            float a1 = (-224.80011f);
            float2x2 b1 = float2x2(451.5999f, -435.9818f, 405.881836f, -324.020142f);
            bool2x2 r1 = bool2x2(false, true, false, true);
            TestUtils.AreEqual(a1 >= b1, r1);

            float a2 = (300.8548f);
            float2x2 b2 = float2x2(-341.652924f, 349.348328f, -342.970947f, 397.824646f);
            bool2x2 r2 = bool2x2(true, false, true, false);
            TestUtils.AreEqual(a2 >= b2, r2);

            float a3 = (363.170837f);
            float2x2 b3 = float2x2(-141.004517f, -304.1397f, 317.879517f, -371.1032f);
            bool2x2 r3 = bool2x2(true, true, true, true);
            TestUtils.AreEqual(a3 >= b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_add_wide_wide()
        {
            float2x2 a0 = float2x2(-404.27536f, -214.93515f, -164.2731f, 338.477173f);
            float2x2 b0 = float2x2(433.900269f, 359.72052f, 420.5044f, -416.3719f);
            float2x2 r0 = float2x2(29.6249084f, 144.78537f, 256.2313f, -77.8947144f);
            TestUtils.AreEqual(a0 + b0, r0);

            float2x2 a1 = float2x2(302.848816f, -330.633f, -21.2443542f, 157.130432f);
            float2x2 b1 = float2x2(-163.213684f, -35.6521f, 260.761f, -20.1174622f);
            float2x2 r1 = float2x2(139.635132f, -366.2851f, 239.516632f, 137.01297f);
            TestUtils.AreEqual(a1 + b1, r1);

            float2x2 a2 = float2x2(32.4448242f, -333.966125f, -488.6353f, 484.605347f);
            float2x2 b2 = float2x2(156.770142f, 315.0406f, -110.87442f, -373.966431f);
            float2x2 r2 = float2x2(189.214966f, -18.9255371f, -599.509766f, 110.638916f);
            TestUtils.AreEqual(a2 + b2, r2);

            float2x2 a3 = float2x2(-143.616638f, -246.090881f, -133.722687f, 280.921021f);
            float2x2 b3 = float2x2(12.482605f, 97.39429f, -149.583466f, -463.5646f);
            float2x2 r3 = float2x2(-131.134033f, -148.6966f, -283.306152f, -182.643585f);
            TestUtils.AreEqual(a3 + b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_add_wide_scalar()
        {
            float2x2 a0 = float2x2(-323.429443f, 324.634583f, -277.883453f, -472.86264f);
            float b0 = (-311.2669f);
            float2x2 r0 = float2x2(-634.69635f, 13.3676758f, -589.1504f, -784.1295f);
            TestUtils.AreEqual(a0 + b0, r0);

            float2x2 a1 = float2x2(-459.056519f, -334.474182f, 149.114319f, -388.344f);
            float b1 = (144.1059f);
            float2x2 r1 = float2x2(-314.950623f, -190.368286f, 293.2202f, -244.2381f);
            TestUtils.AreEqual(a1 + b1, r1);

            float2x2 a2 = float2x2(303.384583f, -29.01889f, 45.1229858f, 101.801208f);
            float b2 = (-7.709381f);
            float2x2 r2 = float2x2(295.6752f, -36.72827f, 37.4136047f, 94.09183f);
            TestUtils.AreEqual(a2 + b2, r2);

            float2x2 a3 = float2x2(-410.416f, -191.047485f, 118.387756f, 11.0637817f);
            float b3 = (279.443237f);
            float2x2 r3 = float2x2(-130.972748f, 88.39575f, 397.831f, 290.507019f);
            TestUtils.AreEqual(a3 + b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_add_scalar_wide()
        {
            float a0 = (190.831238f);
            float2x2 b0 = float2x2(411.157166f, -70.76166f, -404.5351f, 238.02887f);
            float2x2 r0 = float2x2(601.9884f, 120.06958f, -213.703857f, 428.8601f);
            TestUtils.AreEqual(a0 + b0, r0);

            float a1 = (442.2439f);
            float2x2 b1 = float2x2(151.431946f, -447.093872f, -299.924774f, 477.432739f);
            float2x2 r1 = float2x2(593.675842f, -4.84997559f, 142.319122f, 919.676636f);
            TestUtils.AreEqual(a1 + b1, r1);

            float a2 = (-292.327271f);
            float2x2 b2 = float2x2(59.3156128f, -378.93335f, -228.865875f, -309.567322f);
            float2x2 r2 = float2x2(-233.011658f, -671.2606f, -521.1931f, -601.8946f);
            TestUtils.AreEqual(a2 + b2, r2);

            float a3 = (-78.70996f);
            float2x2 b3 = float2x2(-93.9873047f, -173.508575f, 342.767578f, -172.601349f);
            float2x2 r3 = float2x2(-172.697266f, -252.218536f, 264.057617f, -251.31131f);
            TestUtils.AreEqual(a3 + b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_sub_wide_wide()
        {
            float2x2 a0 = float2x2(379.052246f, -16.164032f, 107.1604f, 30.0645752f);
            float2x2 b0 = float2x2(236.683167f, 20.1707764f, 111.480408f, -484.67984f);
            float2x2 r0 = float2x2(142.36908f, -36.33481f, -4.32000732f, 514.7444f);
            TestUtils.AreEqual(a0 - b0, r0);

            float2x2 a1 = float2x2(-428.4387f, 245.627747f, 179.604187f, 505.3778f);
            float2x2 b1 = float2x2(-447.708679f, 18.19458f, -296.147644f, 367.636f);
            float2x2 r1 = float2x2(19.269989f, 227.433167f, 475.751831f, 137.741821f);
            TestUtils.AreEqual(a1 - b1, r1);

            float2x2 a2 = float2x2(317.7188f, -198.473389f, 166.69458f, -379.0271f);
            float2x2 b2 = float2x2(-267.455017f, -71.1860657f, -248.3346f, -138.191071f);
            float2x2 r2 = float2x2(585.1738f, -127.287323f, 415.029175f, -240.836029f);
            TestUtils.AreEqual(a2 - b2, r2);

            float2x2 a3 = float2x2(332.89624f, 159.256226f, -405.395935f, -44.4034729f);
            float2x2 b3 = float2x2(-474.848175f, -275.859375f, -172.86972f, -72.15997f);
            float2x2 r3 = float2x2(807.7444f, 435.1156f, -232.526215f, 27.7565f);
            TestUtils.AreEqual(a3 - b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_sub_wide_scalar()
        {
            float2x2 a0 = float2x2(102.569641f, -199.248688f, 218.154358f, 72.79639f);
            float b0 = (-504.2776f);
            float2x2 r0 = float2x2(606.8472f, 305.0289f, 722.431946f, 577.074f);
            TestUtils.AreEqual(a0 - b0, r0);

            float2x2 a1 = float2x2(-139.426361f, -31.2592163f, -273.2179f, -375.997253f);
            float b1 = (13.45929f);
            float2x2 r1 = float2x2(-152.885651f, -44.7185059f, -286.6772f, -389.456543f);
            TestUtils.AreEqual(a1 - b1, r1);

            float2x2 a2 = float2x2(484.570679f, -126.182953f, -323.067322f, 128.219543f);
            float b2 = (118.86438f);
            float2x2 r2 = float2x2(365.7063f, -245.047333f, -441.9317f, 9.355164f);
            TestUtils.AreEqual(a2 - b2, r2);

            float2x2 a3 = float2x2(-59.64612f, -39.709137f, -388.437134f, 29.6282349f);
            float b3 = (-125.91571f);
            float2x2 r3 = float2x2(66.26959f, 86.20657f, -262.521423f, 155.543945f);
            TestUtils.AreEqual(a3 - b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_sub_scalar_wide()
        {
            float a0 = (385.512268f);
            float2x2 b0 = float2x2(78.82605f, -43.92514f, -401.835358f, -336.146667f);
            float2x2 r0 = float2x2(306.686218f, 429.4374f, 787.347656f, 721.658936f);
            TestUtils.AreEqual(a0 - b0, r0);

            float a1 = (25.8710938f);
            float2x2 b1 = float2x2(188.92981f, 132.735535f, -391.6434f, -131.123383f);
            float2x2 r1 = float2x2(-163.058716f, -106.864441f, 417.5145f, 156.994476f);
            TestUtils.AreEqual(a1 - b1, r1);

            float a2 = (43.8323364f);
            float2x2 b2 = float2x2(-278.0896f, -440.455048f, -375.452454f, 190.743652f);
            float2x2 r2 = float2x2(321.921936f, 484.287384f, 419.2848f, -146.911316f);
            TestUtils.AreEqual(a2 - b2, r2);

            float a3 = (364.129639f);
            float2x2 b3 = float2x2(349.778564f, 492.411f, 122.080627f, -191.474121f);
            float2x2 r3 = float2x2(14.3510742f, -128.281372f, 242.049011f, 555.60376f);
            TestUtils.AreEqual(a3 - b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_mul_wide_wide()
        {
            float2x2 a0 = float2x2(48.7297974f, 263.5946f, -378.487183f, 494.618347f);
            float2x2 b0 = float2x2(351.026917f, 422.9179f, -490.6174f, 81.40454f);
            float2x2 r0 = float2x2(17105.47f, 111478.875f, 185692.391f, 40264.18f);
            TestUtils.AreEqual(a0 * b0, r0);

            float2x2 a1 = float2x2(-185.095612f, 423.893433f, 19.8618164f, -439.218475f);
            float2x2 b1 = float2x2(-357.226563f, 378.994568f, 318.321167f, 208.17157f);
            float2x2 r1 = float2x2(66121.07f, 160653.313f, 6322.43652f, -91432.8f);
            TestUtils.AreEqual(a1 * b1, r1);

            float2x2 a2 = float2x2(200.14624f, -178.356964f, -285.078064f, 56.74951f);
            float2x2 b2 = float2x2(345.885681f, -149.02887f, 293.0559f, 423.94812f);
            float2x2 r2 = float2x2(69227.72f, 26580.3359f, -83543.81f, 24058.85f);
            TestUtils.AreEqual(a2 * b2, r2);

            float2x2 a3 = float2x2(42.60443f, 472.961182f, -264.8566f, -278.0382f);
            float2x2 b3 = float2x2(53.42926f, -257.1869f, 87.37598f, 84.21008f);
            float2x2 r3 = float2x2(2276.32324f, -121639.414f, -23142.1035f, -23413.6211f);
            TestUtils.AreEqual(a3 * b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_mul_wide_scalar()
        {
            float2x2 a0 = float2x2(-387.480865f, -48.62552f, -100.415588f, -161.453522f);
            float b0 = (367.408752f);
            float2x2 r0 = float2x2(-142363.859f, -17865.4414f, -36893.5664f, -59319.4375f);
            TestUtils.AreEqual(a0 * b0, r0);

            float2x2 a1 = float2x2(-428.578979f, 413.477356f, -216.104736f, -65.20349f);
            float b1 = (-198.319f);
            float2x2 r1 = float2x2(84995.35f, -82000.4141f, 42857.6758f, 12931.0908f);
            TestUtils.AreEqual(a1 * b1, r1);

            float2x2 a2 = float2x2(18.9765015f, -356.197571f, 13.6069336f, 394.3037f);
            float b2 = (89.78735f);
            float2x2 r2 = float2x2(1703.84985f, -31982.0371f, 1221.73059f, 35403.49f);
            TestUtils.AreEqual(a2 * b2, r2);

            float2x2 a3 = float2x2(-428.809479f, 92.84253f, 344.986023f, -456.005219f);
            float b3 = (-362.6972f);
            float2x2 r3 = float2x2(155528f, -33673.7266f, -125125.469f, 165391.813f);
            TestUtils.AreEqual(a3 * b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_mul_scalar_wide()
        {
            float a0 = (468.915955f);
            float2x2 b0 = float2x2(123.866638f, 490.9615f, -247.1626f, -176.9495f);
            float2x2 r0 = float2x2(58083.043f, 230219.672f, -115898.484f, -82974.44f);
            TestUtils.AreEqual(a0 * b0, r0);

            float a1 = (382.263855f);
            float2x2 b1 = float2x2(-398.549469f, 120.569336f, -263.275879f, 74.37671f);
            float2x2 r1 = float2x2(-152351.063f, 46089.3f, -100640.852f, 28431.5273f);
            TestUtils.AreEqual(a1 * b1, r1);

            float a2 = (-309.856f);
            float2x2 b2 = float2x2(404.927979f, -105.62616f, 243.92627f, -291.964081f);
            float2x2 r2 = float2x2(-125469.359f, 32728.8984f, -75582.0156f, 90466.82f);
            TestUtils.AreEqual(a2 * b2, r2);

            float a3 = (-92.4649353f);
            float2x2 b3 = float2x2(-144.353f, -7.56222534f, -257.847656f, -215.880646f);
            float2x2 r3 = float2x2(13347.5908f, 699.240662f, 23841.8672f, 19961.39f);
            TestUtils.AreEqual(a3 * b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_div_wide_wide()
        {
            float2x2 a0 = float2x2(6.82073975f, -338.630859f, 497.60437f, -491.269928f);
            float2x2 b0 = float2x2(-352.736023f, 302.209717f, -489.095154f, -380.8916f);
            float2x2 r0 = float2x2(-0.0193366688f, -1.12051606f, -1.01739788f, 1.28978932f);
            TestUtils.AreEqual(a0 / b0, r0);

            float2x2 a1 = float2x2(173.454712f, -441.556519f, 321.0169f, -41.60199f);
            float2x2 b1 = float2x2(289.646484f, -216.575256f, -289.151f, 198.978516f);
            float2x2 r1 = float2x2(0.5988497f, 2.03881335f, -1.110205f, -0.20907779f);
            TestUtils.AreEqual(a1 / b1, r1);

            float2x2 a2 = float2x2(-40.212616f, -169.795868f, -179.339935f, -433.401184f);
            float2x2 b2 = float2x2(-292.720581f, 9.058472f, -29.8904419f, 257.638977f);
            float2x2 r2 = float2x2(0.137375429f, -18.7444286f, 5.999909f, -1.68220353f);
            TestUtils.AreEqual(a2 / b2, r2);

            float2x2 a3 = float2x2(-425.297119f, 335.54364f, 455.9829f, -438.431244f);
            float2x2 b3 = float2x2(-340.1684f, 33.71222f, 281.611023f, -384.688171f);
            float2x2 r3 = float2x2(1.25025463f, 9.953176f, 1.61919415f, 1.13970554f);
            TestUtils.AreEqual(a3 / b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_div_wide_scalar()
        {
            float2x2 a0 = float2x2(-179.145264f, 46.96112f, 127.572754f, 391.679626f);
            float b0 = (-93.36542f);
            float2x2 r0 = float2x2(1.918754f, -0.502981961f, -1.36638129f, -4.195125f);
            TestUtils.AreEqual(a0 / b0, r0);

            float2x2 a1 = float2x2(461.327637f, 18.4229126f, 169.158569f, 37.5003052f);
            float b1 = (150.55542f);
            float2x2 r1 = float2x2(3.06417155f, 0.122366317f, 1.12356341f, 0.249079749f);
            TestUtils.AreEqual(a1 / b1, r1);

            float2x2 a2 = float2x2(121.809082f, 398.16748f, -331.000366f, -498.451965f);
            float b2 = (-22.5421448f);
            float2x2 r2 = float2x2(-5.40361547f, -17.6632481f, 14.6836233f, 22.1120033f);
            TestUtils.AreEqual(a2 / b2, r2);

            float2x2 a3 = float2x2(502.30603f, -191.8522f, -35.94284f, -369.294861f);
            float b3 = (-329.666962f);
            float2x2 r3 = float2x2(-1.52367723f, 0.581957638f, 0.109027728f, 1.12020588f);
            TestUtils.AreEqual(a3 / b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_div_scalar_wide()
        {
            float a0 = (451.844666f);
            float2x2 b0 = float2x2(-95.0651855f, 207.048767f, 502.384033f, 62.0412f);
            float2x2 r0 = float2x2(-4.75299835f, 2.18231034f, 0.899400949f, 7.28297758f);
            TestUtils.AreEqual(a0 / b0, r0);

            float a1 = (-110.84549f);
            float2x2 b1 = float2x2(-332.612732f, 224.279358f, -492.734528f, 435.0329f);
            float2x2 r1 = float2x2(0.3332569f, -0.494229555f, 0.224959865f, -0.254797935f);
            TestUtils.AreEqual(a1 / b1, r1);

            float a2 = (503.8188f);
            float2x2 b2 = float2x2(291.349426f, 88.02417f, 328.702759f, 50.01013f);
            float2x2 r2 = float2x2(1.72925961f, 5.7236414f, 1.53274894f, 10.0743341f);
            TestUtils.AreEqual(a2 / b2, r2);

            float a3 = (-509.816162f);
            float2x2 b3 = float2x2(158.94751f, 68.4343262f, -237.568573f, 32.9957275f);
            float2x2 r3 = float2x2(-3.20745f, -7.449714f, 2.14597487f, -15.4509754f);
            TestUtils.AreEqual(a3 / b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_mod_wide_wide()
        {
            float2x2 a0 = float2x2(157.5586f, 504.938f, 73.00708f, -387.6087f);
            float2x2 b0 = float2x2(180.250183f, -41.4798279f, -308.673157f, -326.860046f);
            float2x2 r0 = float2x2(157.5586f, 7.18005371f, 73.00708f, -60.7486572f);
            TestUtils.AreEqual(a0 % b0, r0);

            float2x2 a1 = float2x2(278.5445f, 282.228149f, 57.0862427f, -63.974762f);
            float2x2 b1 = float2x2(411.588257f, 429.410583f, 471.1482f, 226.144348f);
            float2x2 r1 = float2x2(278.5445f, 282.228149f, 57.0862427f, -63.974762f);
            TestUtils.AreEqual(a1 % b1, r1);

            float2x2 a2 = float2x2(-345.268982f, -380.7162f, 470.2804f, -480.307465f);
            float2x2 b2 = float2x2(423.907471f, -300.951752f, 67.24133f, -488.690979f);
            float2x2 r2 = float2x2(-345.268982f, -79.7644348f, 66.8324f, -480.307465f);
            TestUtils.AreEqual(a2 % b2, r2);

            float2x2 a3 = float2x2(65.2514648f, 503.1162f, 387.605835f, -281.181274f);
            float2x2 b3 = float2x2(-440.438141f, 508.5224f, -108.2384f, 93.46802f);
            float2x2 r3 = float2x2(65.2514648f, 503.1162f, 62.890625f, -0.7772217f);
            TestUtils.AreEqual(a3 % b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_mod_wide_scalar()
        {
            float2x2 a0 = float2x2(42.07245f, 313.0503f, 111.52063f, 131.212036f);
            float b0 = (260.272583f);
            float2x2 r0 = float2x2(42.07245f, 52.77771f, 111.52063f, 131.212036f);
            TestUtils.AreEqual(a0 % b0, r0);

            float2x2 a1 = float2x2(-460.440857f, -221.73172f, -316.3909f, 24.1831055f);
            float b1 = (-436.485046f);
            float2x2 r1 = float2x2(-23.95581f, -221.73172f, -316.3909f, 24.1831055f);
            TestUtils.AreEqual(a1 % b1, r1);

            float2x2 a2 = float2x2(-238.9426f, -240.832489f, -12.3947144f, -152.489655f);
            float b2 = (335.600952f);
            float2x2 r2 = float2x2(-238.9426f, -240.832489f, -12.3947144f, -152.489655f);
            TestUtils.AreEqual(a2 % b2, r2);

            float2x2 a3 = float2x2(-387.4286f, -51.5551453f, 179.872742f, 15.7027588f);
            float b3 = (-240.0715f);
            float2x2 r3 = float2x2(-147.357086f, -51.5551453f, 179.872742f, 15.7027588f);
            TestUtils.AreEqual(a3 % b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_mod_scalar_wide()
        {
            float a0 = (-162.9458f);
            float2x2 b0 = float2x2(171.125732f, 159.207947f, 491.348083f, -136.5397f);
            float2x2 r0 = float2x2(-162.9458f, -3.737854f, -162.9458f, -26.4060974f);
            TestUtils.AreEqual(a0 % b0, r0);

            float a1 = (84.48755f);
            float2x2 b1 = float2x2(414.3911f, -85.03061f, 161.989563f, -7.60800171f);
            float2x2 r1 = float2x2(84.48755f, 84.48755f, 84.48755f, 0.79953f);
            TestUtils.AreEqual(a1 % b1, r1);

            float a2 = (-85.22388f);
            float2x2 b2 = float2x2(160.841248f, -234.483124f, 114.877625f, -40.5487061f);
            float2x2 r2 = float2x2(-85.22388f, -85.22388f, -85.22388f, -4.126465f);
            TestUtils.AreEqual(a2 % b2, r2);

            float a3 = (-85.7437439f);
            float2x2 b3 = float2x2(-235.708923f, -135.851166f, 391.487f, 240.695984f);
            float2x2 r3 = float2x2(-85.7437439f, -85.7437439f, -85.7437439f, -85.7437439f);
            TestUtils.AreEqual(a3 % b3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_plus()
        {
            float2x2 a0 = float2x2(150.599854f, -137.8551f, 439.0912f, 401.849243f);
            float2x2 r0 = float2x2(150.599854f, -137.8551f, 439.0912f, 401.849243f);
            TestUtils.AreEqual(+a0, r0);

            float2x2 a1 = float2x2(401.823547f, -364.624817f, 444.5669f, -135.177917f);
            float2x2 r1 = float2x2(401.823547f, -364.624817f, 444.5669f, -135.177917f);
            TestUtils.AreEqual(+a1, r1);

            float2x2 a2 = float2x2(188.590271f, -176.78833f, 67.19397f, -202.573944f);
            float2x2 r2 = float2x2(188.590271f, -176.78833f, 67.19397f, -202.573944f);
            TestUtils.AreEqual(+a2, r2);

            float2x2 a3 = float2x2(-83.5177f, 369.197021f, 453.9458f, 288.732178f);
            float2x2 r3 = float2x2(-83.5177f, 369.197021f, 453.9458f, 288.732178f);
            TestUtils.AreEqual(+a3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_neg()
        {
            float2x2 a0 = float2x2(-169.281158f, -377.0252f, 36.6141357f, -258.382446f);
            float2x2 r0 = float2x2(169.281158f, 377.0252f, -36.6141357f, 258.382446f);
            TestUtils.AreEqual(-a0, r0);

            float2x2 a1 = float2x2(469.914551f, 350.969238f, 176.102539f, 494.421631f);
            float2x2 r1 = float2x2(-469.914551f, -350.969238f, -176.102539f, -494.421631f);
            TestUtils.AreEqual(-a1, r1);

            float2x2 a2 = float2x2(201.18689f, 313.8802f, 381.035767f, 327.1795f);
            float2x2 r2 = float2x2(-201.18689f, -313.8802f, -381.035767f, -327.1795f);
            TestUtils.AreEqual(-a2, r2);

            float2x2 a3 = float2x2(292.367554f, 448.669861f, 339.456848f, 93.50537f);
            float2x2 r3 = float2x2(-292.367554f, -448.669861f, -339.456848f, -93.50537f);
            TestUtils.AreEqual(-a3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_prefix_inc()
        {
            float2x2 a0 = float2x2(86.58539f, 161.589783f, 443.929626f, -338.268433f);
            float2x2 r0 = float2x2(87.58539f, 162.589783f, 444.929626f, -337.268433f);
            TestUtils.AreEqual(++a0, r0);

            float2x2 a1 = float2x2(-34.5586548f, 359.1416f, 145.026123f, 157.233154f);
            float2x2 r1 = float2x2(-33.5586548f, 360.1416f, 146.026123f, 158.233154f);
            TestUtils.AreEqual(++a1, r1);

            float2x2 a2 = float2x2(25.3619385f, 346.040466f, 381.775635f, 244.663025f);
            float2x2 r2 = float2x2(26.3619385f, 347.040466f, 382.775635f, 245.663025f);
            TestUtils.AreEqual(++a2, r2);

            float2x2 a3 = float2x2(49.9732056f, 218.376526f, 166.647827f, -153.756561f);
            float2x2 r3 = float2x2(50.9732056f, 219.376526f, 167.647827f, -152.756561f);
            TestUtils.AreEqual(++a3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_postfix_inc()
        {
            float2x2 a0 = float2x2(-281.7821f, 215.342224f, 120.820862f, -325.353668f);
            float2x2 r0 = float2x2(-281.7821f, 215.342224f, 120.820862f, -325.353668f);
            TestUtils.AreEqual(a0++, r0);

            float2x2 a1 = float2x2(-179.722931f, -375.17334f, 193.365723f, 329.5243f);
            float2x2 r1 = float2x2(-179.722931f, -375.17334f, 193.365723f, 329.5243f);
            TestUtils.AreEqual(a1++, r1);

            float2x2 a2 = float2x2(-341.1537f, 277.307373f, -15.2096863f, -362.9092f);
            float2x2 r2 = float2x2(-341.1537f, 277.307373f, -15.2096863f, -362.9092f);
            TestUtils.AreEqual(a2++, r2);

            float2x2 a3 = float2x2(480.75708f, -132.573273f, -43.3430176f, 63.9730225f);
            float2x2 r3 = float2x2(480.75708f, -132.573273f, -43.3430176f, 63.9730225f);
            TestUtils.AreEqual(a3++, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_prefix_dec()
        {
            float2x2 a0 = float2x2(340.001831f, 496.070862f, 288.384216f, 183.694641f);
            float2x2 r0 = float2x2(339.001831f, 495.070862f, 287.384216f, 182.694641f);
            TestUtils.AreEqual(--a0, r0);

            float2x2 a1 = float2x2(-353.6148f, -240.591583f, 15.32019f, 276.588684f);
            float2x2 r1 = float2x2(-354.6148f, -241.591583f, 14.32019f, 275.588684f);
            TestUtils.AreEqual(--a1, r1);

            float2x2 a2 = float2x2(311.914368f, -268.388153f, 349.170227f, 468.03656f);
            float2x2 r2 = float2x2(310.914368f, -269.388153f, 348.170227f, 467.03656f);
            TestUtils.AreEqual(--a2, r2);

            float2x2 a3 = float2x2(-93.05707f, -164.938538f, 278.540283f, -142.655212f);
            float2x2 r3 = float2x2(-94.05707f, -165.938538f, 277.540283f, -143.655212f);
            TestUtils.AreEqual(--a3, r3);
        }

        [TestCompiler]
        public static void float2x2_operator_postfix_dec()
        {
            float2x2 a0 = float2x2(-148.111755f, 252.8498f, -106.1579f, 132.648621f);
            float2x2 r0 = float2x2(-148.111755f, 252.8498f, -106.1579f, 132.648621f);
            TestUtils.AreEqual(a0--, r0);

            float2x2 a1 = float2x2(-370.723755f, -321.157837f, 450.6018f, 330.9572f);
            float2x2 r1 = float2x2(-370.723755f, -321.157837f, 450.6018f, 330.9572f);
            TestUtils.AreEqual(a1--, r1);

            float2x2 a2 = float2x2(425.6258f, -164.309845f, 234.149658f, -320.725952f);
            float2x2 r2 = float2x2(425.6258f, -164.309845f, 234.149658f, -320.725952f);
            TestUtils.AreEqual(a2--, r2);

            float2x2 a3 = float2x2(-337.031372f, -298.127167f, 453.00238f, -453.877f);
            float2x2 r3 = float2x2(-337.031372f, -298.127167f, 453.00238f, -453.877f);
            TestUtils.AreEqual(a3--, r3);
        }


    }
}
