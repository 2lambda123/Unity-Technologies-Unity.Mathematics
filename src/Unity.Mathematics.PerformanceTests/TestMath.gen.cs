//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. To update the generation of this file, modify and re-run Unity.Mathematics.CodeGen.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using NUnit.Framework;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.PerformanceTesting;
using Unity.Mathematics.Geometry;
using Unity.Burst;

namespace Unity.Mathematics.PerformanceTests
{
    partial class TestMath
    {
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class orthonormal_basis_float
        {
            public const int iterations = 1000000;

            public struct Arguments : IDisposable
            {
                public Random* rng;
                public float3* v1;
                public float3* v2;
                public float3* v3;

                public void Init()
                {
                    rng = (Random*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<Random>() * iterations, UnsafeUtility.AlignOf<Random>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        rng[i] = new Random(1234u);
                    }

                    v1 = (float3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3>() * iterations, UnsafeUtility.AlignOf<float3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v1[i] = rng[0].NextFloat3Direction();
                    }

                    v2 = (float3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3>() * iterations, UnsafeUtility.AlignOf<float3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v2[i] = new float3();
                    }

                    v3 = (float3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3>() * iterations, UnsafeUtility.AlignOf<float3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v3[i] = new float3();
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(rng, Allocator.Persistent);
                    UnsafeUtility.Free(v1, Allocator.Persistent);
                    UnsafeUtility.Free(v2, Allocator.Persistent);
                    UnsafeUtility.Free(v3, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    math.orthonormal_basis(args.v1[i], out args.v2[i], out args.v3[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void orthonormal_basis_float_mono()
        {
            orthonormal_basis_float.TestFunction testFunction = orthonormal_basis_float.MonoTestFunction;
            var args = new orthonormal_basis_float.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void orthonormal_basis_float_burst()
        {
            FunctionPointer<orthonormal_basis_float.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<orthonormal_basis_float.TestFunction>(orthonormal_basis_float.BurstTestFunction);
            var args = new orthonormal_basis_float.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class orthonormal_basis_double
        {
            public const int iterations = 1000000;

            public struct Arguments : IDisposable
            {
                public Random* rng;
                public double3* v1;
                public double3* v2;
                public double3* v3;

                public void Init()
                {
                    rng = (Random*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<Random>() * iterations, UnsafeUtility.AlignOf<Random>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        rng[i] = new Random(1234u);
                    }

                    v1 = (double3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<double3>() * iterations, UnsafeUtility.AlignOf<double3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v1[i] = rng[0].NextDouble3Direction();
                    }

                    v2 = (double3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<double3>() * iterations, UnsafeUtility.AlignOf<double3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v2[i] = new double();
                    }

                    v3 = (double3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<double3>() * iterations, UnsafeUtility.AlignOf<double3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        v3[i] = new double();
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(rng, Allocator.Persistent);
                    UnsafeUtility.Free(v1, Allocator.Persistent);
                    UnsafeUtility.Free(v2, Allocator.Persistent);
                    UnsafeUtility.Free(v3, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    math.orthonormal_basis(args.v1[i], out args.v2[i], out args.v3[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void orthonormal_basis_double_mono()
        {
            orthonormal_basis_double.TestFunction testFunction = orthonormal_basis_double.MonoTestFunction;
            var args = new orthonormal_basis_double.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void orthonormal_basis_double_burst()
        {
            FunctionPointer<orthonormal_basis_double.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<orthonormal_basis_double.TestFunction>(orthonormal_basis_double.BurstTestFunction);
            var args = new orthonormal_basis_double.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class chgsign_float
        {
            public const int iterations = 100000;

            public struct Arguments : IDisposable
            {
                public Random* rng;
                public float* f;
                public float* sign;
                public float* result;

                public void Init()
                {
                    rng = (Random*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<Random>() * iterations, UnsafeUtility.AlignOf<Random>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        rng[i] = new Random(1234u);
                    }

                    f = (float*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float>() * iterations, UnsafeUtility.AlignOf<float>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        f[i] = 1.0f;
                    }

                    sign = (float*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float>() * iterations, UnsafeUtility.AlignOf<float>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        sign[i] = rng[0].NextFloat(-1.0f, 1.0f);
                    }

                    result = (float*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float>() * iterations, UnsafeUtility.AlignOf<float>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        result[i] = 0.0f;
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(rng, Allocator.Persistent);
                    UnsafeUtility.Free(f, Allocator.Persistent);
                    UnsafeUtility.Free(sign, Allocator.Persistent);
                    UnsafeUtility.Free(result, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.result[i] = math.chgsign(args.f[i], args.sign[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void chgsign_float_mono()
        {
            chgsign_float.TestFunction testFunction = chgsign_float.MonoTestFunction;
            var args = new chgsign_float.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void chgsign_float_burst()
        {
            FunctionPointer<chgsign_float.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<chgsign_float.TestFunction>(chgsign_float.BurstTestFunction);
            var args = new chgsign_float.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class chgsign_float2
        {
            public const int iterations = 100000;

            public struct Arguments : IDisposable
            {
                public Random* rng;
                public float2* f;
                public float2* sign;
                public float2* result;

                public void Init()
                {
                    rng = (Random*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<Random>() * iterations, UnsafeUtility.AlignOf<Random>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        rng[i] = new Random(1234u);
                    }

                    f = (float2*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float2>() * iterations, UnsafeUtility.AlignOf<float2>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        f[i] = new float2(1.0f);
                    }

                    sign = (float2*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float2>() * iterations, UnsafeUtility.AlignOf<float2>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        sign[i] = rng[0].NextFloat2(-1.0f, 1.0f);
                    }

                    result = (float2*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float2>() * iterations, UnsafeUtility.AlignOf<float2>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        result[i] = new float2();
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(rng, Allocator.Persistent);
                    UnsafeUtility.Free(f, Allocator.Persistent);
                    UnsafeUtility.Free(sign, Allocator.Persistent);
                    UnsafeUtility.Free(result, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.result[i] = math.chgsign(args.f[i], args.sign[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void chgsign_float2_mono()
        {
            chgsign_float2.TestFunction testFunction = chgsign_float2.MonoTestFunction;
            var args = new chgsign_float2.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void chgsign_float2_burst()
        {
            FunctionPointer<chgsign_float2.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<chgsign_float2.TestFunction>(chgsign_float2.BurstTestFunction);
            var args = new chgsign_float2.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class chgsign_float3
        {
            public const int iterations = 100000;

            public struct Arguments : IDisposable
            {
                public Random* rng;
                public float3* f;
                public float3* sign;
                public float3* result;

                public void Init()
                {
                    rng = (Random*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<Random>() * iterations, UnsafeUtility.AlignOf<Random>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        rng[i] = new Random(1234u);
                    }

                    f = (float3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3>() * iterations, UnsafeUtility.AlignOf<float3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        f[i] = new float3(1.0f);
                    }

                    sign = (float3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3>() * iterations, UnsafeUtility.AlignOf<float3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        sign[i] = rng[0].NextFloat3(-1.0f, 1.0f);
                    }

                    result = (float3*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float3>() * iterations, UnsafeUtility.AlignOf<float3>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        result[i] = new float3();
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(rng, Allocator.Persistent);
                    UnsafeUtility.Free(f, Allocator.Persistent);
                    UnsafeUtility.Free(sign, Allocator.Persistent);
                    UnsafeUtility.Free(result, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.result[i] = math.chgsign(args.f[i], args.sign[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void chgsign_float3_mono()
        {
            chgsign_float3.TestFunction testFunction = chgsign_float3.MonoTestFunction;
            var args = new chgsign_float3.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void chgsign_float3_burst()
        {
            FunctionPointer<chgsign_float3.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<chgsign_float3.TestFunction>(chgsign_float3.BurstTestFunction);
            var args = new chgsign_float3.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
        [BurstCompile(CompileSynchronously = true)]
        public unsafe class chgsign_float4
        {
            public const int iterations = 100000;

            public struct Arguments : IDisposable
            {
                public Random* rng;
                public float4* f;
                public float4* sign;
                public float4* result;

                public void Init()
                {
                    rng = (Random*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<Random>() * iterations, UnsafeUtility.AlignOf<Random>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        rng[i] = new Random(1234u);
                    }

                    f = (float4*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float4>() * iterations, UnsafeUtility.AlignOf<float4>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        f[i] = new float4(1.0f);
                    }

                    sign = (float4*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float4>() * iterations, UnsafeUtility.AlignOf<float4>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        sign[i] = rng[0].NextFloat4(-1.0f, 1.0f);
                    }

                    result = (float4*)UnsafeUtility.Malloc(UnsafeUtility.SizeOf<float4>() * iterations, UnsafeUtility.AlignOf<float4>(), Allocator.Persistent);
                    for (int i = 0; i < iterations; ++i)
                    {
                        result[i] = new float4();
                    }

                }

                public void Dispose()
                {
                    UnsafeUtility.Free(rng, Allocator.Persistent);
                    UnsafeUtility.Free(f, Allocator.Persistent);
                    UnsafeUtility.Free(sign, Allocator.Persistent);
                    UnsafeUtility.Free(result, Allocator.Persistent);
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < iterations; ++i)
                {
                    args.result[i] = math.chgsign(args.f[i], args.sign[i]);
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile(CompileSynchronously = true)]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void chgsign_float4_mono()
        {
            chgsign_float4.TestFunction testFunction = chgsign_float4.MonoTestFunction;
            var args = new chgsign_float4.Arguments();
            args.Init();

            var monoSampleGroup = new SampleGroup("Mono", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(monoSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }

        [Test, Performance]
        public void chgsign_float4_burst()
        {
            FunctionPointer<chgsign_float4.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<chgsign_float4.TestFunction>(chgsign_float4.BurstTestFunction);
            var args = new chgsign_float4.Arguments();
            args.Init();

            var burstSampleGroup = new SampleGroup("Burst", SampleUnit.Microsecond);            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .SampleGroup(burstSampleGroup)
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
            args.Dispose();
        }
    }
}
