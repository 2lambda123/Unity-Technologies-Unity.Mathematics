//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using NUnit.Framework;
using Unity.PerformanceTesting;
using Unity.Burst;
using Unity.Collections;

namespace Unity.Mathematics.PerformanceTests
{
    public partial class TestRandom
    {
        [BurstCompile]
        public class Random_NextUint
        {
            public struct Arguments
            {
                public Random rng;
                public uint u;

                public void Init()
                {
                    rng = new Unity.Mathematics.Random(1);
                    u = 0;
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < 10000; ++i)
                {
                    args.u = args.rng.NextUInt();
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void Random_NextUint_mono()
        {
            Random_NextUint.TestFunction testFunction = Random_NextUint.MonoTestFunction;
            var args = new Random_NextUint.Arguments();
            args.Init();

            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }

        [Test, Performance]
        public void Random_NextUint_burst()
        {
            FunctionPointer<Random_NextUint.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<Random_NextUint.TestFunction>(Random_NextUint.BurstTestFunction);
            var args = new Random_NextUint.Arguments();
            args.Init();

            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }
        [BurstCompile]
        public class Random_NextUint2
        {
            public struct Arguments
            {
                public Random rng;
                public uint2 u;

                public void Init()
                {
                    rng = new Unity.Mathematics.Random(1);
                    u = 0;
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < 10000; ++i)
                {
                    args.u = args.rng.NextUInt2();
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void Random_NextUint2_mono()
        {
            Random_NextUint2.TestFunction testFunction = Random_NextUint2.MonoTestFunction;
            var args = new Random_NextUint2.Arguments();
            args.Init();

            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }

        [Test, Performance]
        public void Random_NextUint2_burst()
        {
            FunctionPointer<Random_NextUint2.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<Random_NextUint2.TestFunction>(Random_NextUint2.BurstTestFunction);
            var args = new Random_NextUint2.Arguments();
            args.Init();

            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }
        [BurstCompile]
        public class Random_NextUint3
        {
            public struct Arguments
            {
                public Random rng;
                public uint3 u;

                public void Init()
                {
                    rng = new Unity.Mathematics.Random(1);
                    u = 0;
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < 10000; ++i)
                {
                    args.u = args.rng.NextUInt3();
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void Random_NextUint3_mono()
        {
            Random_NextUint3.TestFunction testFunction = Random_NextUint3.MonoTestFunction;
            var args = new Random_NextUint3.Arguments();
            args.Init();

            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }

        [Test, Performance]
        public void Random_NextUint3_burst()
        {
            FunctionPointer<Random_NextUint3.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<Random_NextUint3.TestFunction>(Random_NextUint3.BurstTestFunction);
            var args = new Random_NextUint3.Arguments();
            args.Init();

            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }
        [BurstCompile]
        public class Random_NextUint4
        {
            public struct Arguments
            {
                public Random rng;
                public uint4 u;

                public void Init()
                {
                    rng = new Unity.Mathematics.Random(1);
                    u = 0;
                }
            }

            public static void CommonTestFunction(ref Arguments args)
            {
                for (int i = 0; i < 10000; ++i)
                {
                    args.u = args.rng.NextUInt4();
                }
            }

            public static void MonoTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            [BurstCompile]
            public static void BurstTestFunction(ref Arguments args)
            {
                CommonTestFunction(ref args);
            }

            public delegate void TestFunction(ref Arguments args);
        }

        [Test, Performance]
        public void Random_NextUint4_mono()
        {
            Random_NextUint4.TestFunction testFunction = Random_NextUint4.MonoTestFunction;
            var args = new Random_NextUint4.Arguments();
            args.Init();

            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }

        [Test, Performance]
        public void Random_NextUint4_burst()
        {
            FunctionPointer<Random_NextUint4.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<Random_NextUint4.TestFunction>(Random_NextUint4.BurstTestFunction);
            var args = new Random_NextUint4.Arguments();
            args.Init();

            Measure.Method(() =>
            {
                testFunction.Invoke(ref args);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }
    }
}
