//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using NUnit.Framework;
using Unity.PerformanceTesting;
using Unity.Burst;

namespace Unity.Mathematics.PerformanceTests
{
    public partial class TestMul
    {
        [BurstCompile]
        public class TestMul_float4x4_float4x4
        {
            public static void CommonTestFunction(ref float4x4 m2)
            {
                var m1 = float4x4.identity;

                for (int i = 0; i < 10000; ++i)
                {
                    m2 = math.mul(m1, m2);
                }
            }

            public static void MonoTestFunction(ref float4x4 m2)
            {
                CommonTestFunction(ref m2);
            }

            [BurstCompile]
            public static void BurstTestFunction(ref float4x4 m2)
            {
                CommonTestFunction(ref m2);
            }

            public delegate void TestFunction(ref float4x4 m2);
        }

        [Test, Performance]
        public void float4x4_float4x4_mono()
        {
            TestMul_float4x4_float4x4.TestFunction testFunction = TestMul_float4x4_float4x4.MonoTestFunction;
            var m2 = float4x4.identity;

            Measure.Method(() =>
            {
                testFunction.Invoke(ref m2);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }

        [Test, Performance]
        public void float4x4_float4x4_burst()
        {
            FunctionPointer<TestMul_float4x4_float4x4.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<TestMul_float4x4_float4x4.TestFunction>(TestMul_float4x4_float4x4.BurstTestFunction);
            var m2 = float4x4.identity;

            Measure.Method(() =>
            {
                testFunction.Invoke(ref m2);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }
        [BurstCompile]
        public class TestMul_float4x4_float4
        {
            public static void CommonTestFunction(ref float4 m2)
            {
                var m1 = float4x4.identity;

                for (int i = 0; i < 10000; ++i)
                {
                    m2 = math.mul(m1, m2);
                }
            }

            public static void MonoTestFunction(ref float4 m2)
            {
                CommonTestFunction(ref m2);
            }

            [BurstCompile]
            public static void BurstTestFunction(ref float4 m2)
            {
                CommonTestFunction(ref m2);
            }

            public delegate void TestFunction(ref float4 m2);
        }

        [Test, Performance]
        public void float4x4_float4_mono()
        {
            TestMul_float4x4_float4.TestFunction testFunction = TestMul_float4x4_float4.MonoTestFunction;
            var m2 = new float4(1.0f, 0.0f, 0.0f, 1.0f);

            Measure.Method(() =>
            {
                testFunction.Invoke(ref m2);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }

        [Test, Performance]
        public void float4x4_float4_burst()
        {
            FunctionPointer<TestMul_float4x4_float4.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<TestMul_float4x4_float4.TestFunction>(TestMul_float4x4_float4.BurstTestFunction);
            var m2 = new float4(1.0f, 0.0f, 0.0f, 1.0f);

            Measure.Method(() =>
            {
                testFunction.Invoke(ref m2);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }
        [BurstCompile]
        public class TestMul_quaternion_quaternion
        {
            public static void CommonTestFunction(ref quaternion m2)
            {
                var m1 = quaternion.identity;

                for (int i = 0; i < 10000; ++i)
                {
                    m2 = math.mul(m1, m2);
                }
            }

            public static void MonoTestFunction(ref quaternion m2)
            {
                CommonTestFunction(ref m2);
            }

            [BurstCompile]
            public static void BurstTestFunction(ref quaternion m2)
            {
                CommonTestFunction(ref m2);
            }

            public delegate void TestFunction(ref quaternion m2);
        }

        [Test, Performance]
        public void quaternion_quaternion_mono()
        {
            TestMul_quaternion_quaternion.TestFunction testFunction = TestMul_quaternion_quaternion.MonoTestFunction;
            var m2 = quaternion.identity;

            Measure.Method(() =>
            {
                testFunction.Invoke(ref m2);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }

        [Test, Performance]
        public void quaternion_quaternion_burst()
        {
            FunctionPointer<TestMul_quaternion_quaternion.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<TestMul_quaternion_quaternion.TestFunction>(TestMul_quaternion_quaternion.BurstTestFunction);
            var m2 = quaternion.identity;

            Measure.Method(() =>
            {
                testFunction.Invoke(ref m2);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }
        [BurstCompile]
        public class TestMul_float3x3_float3
        {
            public static void CommonTestFunction(ref float3 m2)
            {
                var m1 = float3x3.identity;

                for (int i = 0; i < 10000; ++i)
                {
                    m2 = math.mul(m1, m2);
                }
            }

            public static void MonoTestFunction(ref float3 m2)
            {
                CommonTestFunction(ref m2);
            }

            [BurstCompile]
            public static void BurstTestFunction(ref float3 m2)
            {
                CommonTestFunction(ref m2);
            }

            public delegate void TestFunction(ref float3 m2);
        }

        [Test, Performance]
        public void float3x3_float3_mono()
        {
            TestMul_float3x3_float3.TestFunction testFunction = TestMul_float3x3_float3.MonoTestFunction;
            var m2 = new float3(1.0f, 0.0f, 0.0f);

            Measure.Method(() =>
            {
                testFunction.Invoke(ref m2);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }

        [Test, Performance]
        public void float3x3_float3_burst()
        {
            FunctionPointer<TestMul_float3x3_float3.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<TestMul_float3x3_float3.TestFunction>(TestMul_float3x3_float3.BurstTestFunction);
            var m2 = new float3(1.0f, 0.0f, 0.0f);

            Measure.Method(() =>
            {
                testFunction.Invoke(ref m2);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }
        [BurstCompile]
        public class TestMul_float2x2_float2x2
        {
            public static void CommonTestFunction(ref float2x2 m2)
            {
                var m1 = float2x2.identity;

                for (int i = 0; i < 10000; ++i)
                {
                    m2 = math.mul(m1, m2);
                }
            }

            public static void MonoTestFunction(ref float2x2 m2)
            {
                CommonTestFunction(ref m2);
            }

            [BurstCompile]
            public static void BurstTestFunction(ref float2x2 m2)
            {
                CommonTestFunction(ref m2);
            }

            public delegate void TestFunction(ref float2x2 m2);
        }

        [Test, Performance]
        public void float2x2_float2x2_mono()
        {
            TestMul_float2x2_float2x2.TestFunction testFunction = TestMul_float2x2_float2x2.MonoTestFunction;
            var m2 = float2x2.identity;

            Measure.Method(() =>
            {
                testFunction.Invoke(ref m2);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }

        [Test, Performance]
        public void float2x2_float2x2_burst()
        {
            FunctionPointer<TestMul_float2x2_float2x2.TestFunction> testFunction = BurstCompiler.CompileFunctionPointer<TestMul_float2x2_float2x2.TestFunction>(TestMul_float2x2_float2x2.BurstTestFunction);
            var m2 = float2x2.identity;

            Measure.Method(() =>
            {
                testFunction.Invoke(ref m2);
            })
            .WarmupCount(1)
            .MeasurementCount(10)
            .Run();
        }
    }
}
